#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∫–ª–∞—Å—Å–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
"""

import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db

logger = logging.getLogger(__name__)

class SpellSelectionManager:
    def __init__(self):
        self.db = get_db()
    
    def needs_spell_selection(self, class_id: int, level: int = 1) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –≤—ã–±–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª–∞—Å—Å –º–∞–≥–∏—á–µ—Å–∫–∏–º
        class_query = "SELECT is_spellcaster FROM classes WHERE id = %s"
        class_info = self.db.execute_query(class_query, (class_id,))
        
        if not class_info or not class_info[0]['is_spellcaster']:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
        slots_query = "SELECT known_cantrips, known_spells FROM class_spell_slots WHERE class_id = %s AND level = %s"
        slots_info = self.db.execute_query(slots_query, (class_id, level))
        
        if not slots_info:
            return False
        
        cantrips = slots_info[0]['known_cantrips'] or 0
        spells = slots_info[0]['known_spells'] or 0
        
        return cantrips > 0 or spells > 0
    
    def get_available_cantrips(self, class_id: int) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∞."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
        class_query = "SELECT name FROM classes WHERE id = %s"
        class_info = self.db.execute_query(class_query, (class_id,))
        
        if not class_info:
            return []
        
        class_name = class_info[0]['name']
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–≤–æ—Ä—ã (—É—Ä–æ–≤–µ–Ω—å 0), –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É
        cantrips_query = """
            SELECT id, name, description, damage, damage_type, is_combat, is_area_of_effect
            FROM spells 
            WHERE level = 0 AND available_classes LIKE %s
            ORDER BY name
        """
        
        cantrips = self.db.execute_query(cantrips_query, (f'%"{class_name}"%',))
        return cantrips or []
    
    def get_available_spells(self, class_id: int, level: int = 1) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ –∏ —É—Ä–æ–≤–Ω—è."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
        class_query = "SELECT name FROM classes WHERE id = %s"
        class_info = self.db.execute_query(class_query, (class_id,))
        
        if not class_info:
            return []
        
        class_name = class_info[0]['name']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        slots_query = """
            SELECT slot_level_1, slot_level_2, slot_level_3, slot_level_4, slot_level_5,
                   slot_level_6, slot_level_7, slot_level_8, slot_level_9
            FROM class_spell_slots
            WHERE class_id = %s AND level = %s
        """
        
        slots_info = self.db.execute_query(slots_query, (class_id, level))
        
        if not slots_info:
            return []
        
        slots = slots_info[0]
        max_spell_level = 0
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Å–ª–æ—Ç—ã
        slot_levels = [
            slots['slot_level_1'], slots['slot_level_2'], slots['slot_level_3'],
            slots['slot_level_4'], slots['slot_level_5'], slots['slot_level_6'],
            slots['slot_level_7'], slots['slot_level_8'], slots['slot_level_9']
        ]
        
        for i, slot_count in enumerate(slot_levels, 1):
            if slot_count and slot_count > 0:
                max_spell_level = i
        
        if max_spell_level == 0:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π 1-max_spell_level, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–æ–º—É –∫–ª–∞—Å—Å—É
        spells_query = """
            SELECT id, name, level, description, damage, damage_type, is_combat, is_area_of_effect
            FROM spells 
            WHERE level BETWEEN 1 AND %s AND available_classes LIKE %s
            ORDER BY level, name
        """
        
        spells = self.db.execute_query(spells_query, (max_spell_level, f'%"{class_name}"%'))
        return spells or []
    
    async def start_cantrip_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     char_data: dict):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∑–∞–≥–æ–≤–æ—Ä–æ–≤."""
        class_id = char_data.get('class_id')
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥–æ–≤–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
        slots_query = "SELECT known_cantrips FROM class_spell_slots WHERE class_id = %s AND level = 1"
        slots_info = self.db.execute_query(slots_query, (class_id,))
        
        if not slots_info or not slots_info[0]['known_cantrips']:
            # –ù–µ—Ç –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º
            await self.start_spell_selection(update, context, char_data)
            return
        
        cantrips_to_select = slots_info[0]['known_cantrips']
        available_cantrips = self.get_available_cantrips(class_id)
        
        if not available_cantrips:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞!"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–≤–æ—Ä—ã
        char_data['selected_cantrips'] = []
        char_data['cantrips_to_select'] = cantrips_to_select
        char_data['available_cantrips'] = available_cantrips
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callbacks
        context.user_data['char_data'] = char_data
        
        await self.display_cantrip_selection(update, context, char_data)
    
    async def display_cantrip_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                       char_data: dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        selected_count = len(char_data.get('selected_cantrips', []))
        total_count = char_data.get('cantrips_to_select', 0)
        available_cantrips = char_data.get('available_cantrips', [])
        selected_cantrips = char_data.get('selected_cantrips', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–≥–æ–≤–æ—Ä—ã
        available_cantrips = [c for c in available_cantrips if c['id'] not in selected_cantrips]
        
        if selected_count >= total_count:
            # –í—Å–µ –∑–∞–≥–æ–≤–æ—Ä—ã –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º
            await self.start_spell_selection(update, context, char_data)
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–≥–æ–≤–æ—Ä–∞
        keyboard = []
        for cantrip in available_cantrips:
            cantrip_name = cantrip['name']
            damage_info = f" ({cantrip['damage']})" if cantrip['damage'] else ""
            combat_mark = " ‚öîÔ∏è" if cantrip['is_combat'] else ""
            aoe_mark = " [AoE]" if cantrip['is_area_of_effect'] else ""
            
            button_text = f"üîÆ {cantrip_name}{damage_info}{combat_mark}{aoe_mark}"
            callback_data = f"select_cantrip_{cantrip['id']}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        header_text = f"ü™Ñ –í—ã–±–æ—Ä –∑–∞–≥–æ–≤–æ—Ä–æ–≤ ({selected_count}/{total_count})\n\n"
        header_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–≥–æ–≤–æ—Ä –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
        
        if selected_cantrips:
            selected_names = []
            for cantrip_id in selected_cantrips:
                cantrip = next((c for c in char_data.get('available_cantrips', []) if c['id'] == cantrip_id), None)
                if cantrip:
                    selected_names.append(cantrip['name'])
            header_text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_names)}\n\n"
        
        await update.callback_query.edit_message_text(header_text, reply_markup=reply_markup)
    
    async def handle_cantrip_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–≥–æ–≤–æ—Ä–∞."""
        query = update.callback_query
        cantrip_id = int(query.data.split('_')[2])
        
        char_data = context.user_data.get('char_data', {})
        
        if 'selected_cantrips' not in char_data:
            char_data['selected_cantrips'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–≤–æ—Ä –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        if cantrip_id not in char_data['selected_cantrips']:
            char_data['selected_cantrips'].append(cantrip_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
        context.user_data['char_data'] = char_data
        
        await self.display_cantrip_selection(update, context, char_data)
    
    async def start_spell_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   char_data: dict):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π."""
        class_id = char_data.get('class_id')
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
        slots_query = "SELECT known_spells FROM class_spell_slots WHERE class_id = %s AND level = 1"
        slots_info = self.db.execute_query(slots_query, (class_id,))
        
        if not slots_info or not slots_info[0]['known_spells']:
            # –ù–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä
            await self.finish_spell_selection(update, context, char_data)
            return
        
        spells_to_select = slots_info[0]['known_spells']
        available_spells = self.get_available_spells(class_id, 1)
        
        if not available_spells:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞!"
            )
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        char_data['selected_spells'] = []
        char_data['spells_to_select'] = spells_to_select
        char_data['available_spells'] = available_spells
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ context –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ callbacks
        context.user_data['char_data'] = char_data
        
        await self.display_spell_selection(update, context, char_data)
    
    async def display_spell_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                     char_data: dict):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        selected_count = len(char_data.get('selected_spells', []))
        total_count = char_data.get('spells_to_select', 0)
        available_spells = char_data.get('available_spells', [])
        selected_spells = char_data.get('selected_spells', [])
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        available_spells = [s for s in available_spells if s['id'] not in selected_spells]
        
        if selected_count >= total_count:
            # –í—Å–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–±–æ—Ä
            await self.finish_spell_selection(update, context, char_data)
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        spells_by_level = {}
        for spell in available_spells:
            level = spell['level']
            if level not in spells_by_level:
                spells_by_level[level] = []
            spells_by_level[level].append(spell)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        keyboard = []
        for level in sorted(spells_by_level.keys()):
            for spell in spells_by_level[level]:
                spell_name = spell['name']
                damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                combat_mark = " ‚öîÔ∏è" if spell['is_combat'] else ""
                aoe_mark = " [AoE]" if spell['is_area_of_effect'] else ""
                
                button_text = f"‚ú®{level} {spell_name}{damage_info}{combat_mark}{aoe_mark}"
                callback_data = f"select_spell_{spell['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        header_text = f"üìö –í—ã–±–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π ({selected_count}/{total_count})\n\n"
        header_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n\n"
        
        if selected_spells:
            selected_names = []
            for spell_id in selected_spells:
                spell = next((s for s in char_data.get('available_spells', []) if s['id'] == spell_id), None)
                if spell:
                    selected_names.append(f"{spell['name']} ({spell['level']}—É—Ä)")
            header_text += f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_names)}\n\n"
        
        await update.callback_query.edit_message_text(header_text, reply_markup=reply_markup)
    
    async def handle_spell_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        query = update.callback_query
        spell_id = int(query.data.split('_')[2])
        
        char_data = context.user_data.get('char_data', {})
        
        if 'selected_spells' not in char_data:
            char_data['selected_spells'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        if spell_id not in char_data['selected_spells']:
            char_data['selected_spells'].append(spell_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ context
        context.user_data['char_data'] = char_data
        
        await self.display_spell_selection(update, context, char_data)
    
    async def finish_spell_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                    char_data: dict):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ character_generation
        from character_generation import character_gen
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        context.user_data['char_data'] = char_data
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        await character_gen.continue_after_spell_selection(update, context, char_data)
    
    def save_character_spells(self, character_id: int, selected_cantrips: list, selected_spells: list):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–≤–æ—Ä—ã
        for cantrip_id in selected_cantrips:
            self.db.execute_query(
                "INSERT INTO character_spells (character_id, spell_id) VALUES (%s, %s)",
                (character_id, cantrip_id)
            )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        for spell_id in selected_spells:
            self.db.execute_query(
                "INSERT INTO character_spells (character_id, spell_id) VALUES (%s, %s)",
                (character_id, spell_id)
            )
        
        logger.info(f"Saved {len(selected_cantrips)} cantrips and {len(selected_spells)} spells for character {character_id}")

# Global instance
spell_selection_manager = SpellSelectionManager()

import random
import json
import logging
from typing import Dict, List, Tuple, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db

logger = logging.getLogger(__name__)

# Emoji –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
STAT_EMOJIS = {
    'strength': 'üêÇ',      # –ë—ã–∫ - –°–∏–ª–∞
    'dexterity': 'üê±',     # –ö–æ—Ç - –õ–æ–≤–∫–æ—Å—Ç—å  
    'constitution': 'üêª',  # –ú–µ–¥–≤–µ–¥—å - –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
    'intelligence': 'ü¶ä',  # –õ–∏—Å–∞ - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    'wisdom': 'ü¶â',        # –°–æ–≤–∞ - –ú—É–¥—Ä–æ—Å—Ç—å
    'charisma': 'ü¶Ö'       # –û—Ä—ë–ª - –•–∞—Ä–∏–∑–º–∞
}

# –ù–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
STAT_NAMES = {
    'strength': '–°–∏–ª–∞',
    'dexterity': '–õ–æ–≤–∫–æ—Å—Ç—å',
    'constitution': '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', 
    'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
    'charisma': '–•–∞—Ä–∏–∑–º–∞'
}

class CharacterGenerator:
    def __init__(self):
        self.db = get_db()
        
    def roll_stats(self) -> List[int]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (4d6, –æ—Ç–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∏–º–µ–Ω—å—à–∏–π)"""
        stats = []
        for _ in range(6):
            rolls = [random.randint(1, 6) for _ in range(4)]
            rolls.sort(reverse=True)
            stat = sum(rolls[:3])  # –ë–µ—Ä–µ–º 3 –Ω–∞–∏–±–æ–ª—å—à–∏—Ö
            stats.append(stat)
        return stats
    
    def get_modifier(self, stat: int) -> int:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
        return (stat - 10) // 2
    
    def format_character_info(self, char_data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        logger.info(f"Formatting character info for step: {char_data.get('step', 'unknown')}")
        
        # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å emoji
        stats = char_data.get('stats', [])
        stat_names = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma']
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        final_stats = {}
        stat_adjustments = char_data.get('stat_adjustments', {})
        stat_mapping = {'str': 'strength', 'dex': 'dexterity', 'con': 'constitution', 
                       'int': 'intelligence', 'wis': 'wisdom', 'cha': 'charisma'}
        
        for i, stat_name in enumerate(stat_names):
            if i < len(stats):
                base_value = stats[i]
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã
                bonus = 0
                for stat_code, bonus_value in stat_adjustments.items():
                    if stat_code in stat_mapping and stat_mapping[stat_code] == stat_name:
                        bonus = bonus_value
                        break
                final_stats[stat_name] = base_value + bonus
            else:
                final_stats[stat_name] = 10
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        stats_text = "\nüìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
        for stat_name in stat_names:
            emoji = STAT_EMOJIS.get(stat_name, '‚ùì')
            ru_name = STAT_NAMES.get(stat_name, stat_name)
            value = final_stats.get(stat_name, 10)
            modifier = self.get_modifier(value)
            bonus_text = ""
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–Ω—É—Å –µ—Å–ª–∏ –µ—Å—Ç—å
            for stat_code, bonus_value in stat_adjustments.items():
                if stat_code in stat_mapping and stat_mapping[stat_code] == stat_name and bonus_value > 0:
                    base_value = value - bonus_value
                    bonus_text = f" ({base_value}+{bonus_value})"
                    break
            
            stats_text += f"{emoji} **{ru_name}:** {value}{bonus_text} ({modifier:+d})\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        info_text = "üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n"
        
        # –ò–º—è
        if char_data.get('name'):
            info_text += f"üë§ **–ò–º—è:** {char_data['name']}\n"
        
        # –†–∞—Å–∞
        if char_data.get('race_id'):
            try:
                if not self.db.connection or not self.db.connection.is_connected():
                    self.db.connect()
                race_info = self.db.execute_query("SELECT name FROM races WHERE id = %s", (char_data['race_id'],))
                if race_info:
                    info_text += f"üßù‚Äç‚ôÇÔ∏è **–†–∞—Å–∞:** {race_info[0]['name']}\n"
            except Exception as e:
                logger.error(f"Error getting race info: {e}")
        
        # –ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ
        if char_data.get('origin_id'):
            try:
                origin_info = self.db.execute_query("SELECT name FROM origins WHERE id = %s", (char_data['origin_id'],))
                if origin_info:
                    info_text += f"üé≠ **–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:** {origin_info[0]['name']}\n"
            except Exception as e:
                logger.error(f"Error getting origin info: {e}")
        
        # –ö–ª–∞—Å—Å
        if char_data.get('class_id'):
            try:
                class_info = self.db.execute_query("SELECT name FROM classes WHERE id = %s", (char_data['class_id'],))
                if class_info:
                    info_text += f"‚öîÔ∏è **–ö–ª–∞—Å—Å:** {class_info[0]['name']}\n"
            except Exception as e:
                logger.error(f"Error getting class info: {e}")
        
        # –ù–∞–≤—ã–∫–∏
        if char_data.get('selected_skills'):
            skills_text = ", ".join(char_data['selected_skills'])
            info_text += f"üéØ **–ù–∞–≤—ã–∫–∏:** {skills_text}\n"
        
        # –î–µ–Ω—å–≥–∏
        if 'money' in char_data:
            info_text += f"üí∞ **–î–µ–Ω—å–≥–∏:** {char_data['money']} –º–æ–Ω–µ—Ç\n"
        
        # –≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞
        equipment_text = ""
        for equipment in char_data.get('equipment', []):
            if equipment['type'] == 'armor':
                armor_info = self.db.execute_query("SELECT name FROM armor WHERE id = %s", (equipment['id'],))
                if armor_info:
                    equipment_text += f"üõ°Ô∏è **–î–æ—Å–ø–µ—Ö–∏:** {armor_info[0]['name']}\n"
            elif equipment['type'] == 'weapon':
                weapon_info = self.db.execute_query(
                    "SELECT name, damage, damage_type, properties FROM weapons WHERE id = %s", 
                    (equipment['id'],)
                )
                if weapon_info:
                    weapon = weapon_info[0]
                    equipment_text += f"‚öîÔ∏è **–û—Ä—É–∂–∏–µ:** {weapon['name']} ({weapon['damage']} {weapon['damage_type']})\n"
        
        if equipment_text:
            info_text += equipment_text
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª–∞—Å—Å
        if char_data.get('class_id'):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã levels
                level_info = self.db.execute_query("SELECT proficiency_bonus FROM levels WHERE level = 1")
                proficiency_bonus = level_info[0]['proficiency_bonus'] if level_info else 2
                info_text += f"üéØ **–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:** +{proficiency_bonus}\n"
                
                # –ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–æ–≤
                armor_class = 10 + self.get_modifier(final_stats.get('dexterity', 10))
                armor_description = f"{armor_class}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å–ø–µ—Ö–æ–≤
                for equipment in char_data.get('equipment', []):
                    if equipment['type'] == 'armor':
                        armor_info = self.db.execute_query("SELECT armor_class, name FROM armor WHERE id = %s", (equipment['id'],))
                        if armor_info:
                            armor_base = armor_info[0]['armor_class']
                            armor_name = armor_info[0]['name']
                            
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ö–î –¥–æ—Å–ø–µ—Ö–æ–≤
                            if "+" in armor_base:
                                # –ù–∞–ø—Ä–∏–º–µ—Ä: "11 + –õ–æ–≤" –∏–ª–∏ "12 + –õ–æ–≤ (–º–∞–∫—Å 2)"
                                if "–º–∞–∫—Å" in armor_base:
                                    # –°—Ä–µ–¥–Ω–∏–µ –¥–æ—Å–ø–µ—Ö–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                                    base_ac = int(armor_base.split()[0])
                                    max_dex = int(armor_base.split("–º–∞–∫—Å ")[1].split(")")[0])
                                    dex_mod = min(self.get_modifier(final_stats.get('dexterity', 10)), max_dex)
                                    armor_class = base_ac + dex_mod
                                else:
                                    # –õ–µ–≥–∫–∏–µ –¥–æ—Å–ø–µ—Ö–∏
                                    base_ac = int(armor_base.split()[0])
                                    armor_class = base_ac + self.get_modifier(final_stats.get('dexterity', 10))
                            elif armor_base.startswith("+"):
                                # –©–∏—Ç: "+2"
                                armor_class += int(armor_base[1:])
                            else:
                                # –¢—è–∂–µ–ª—ã–µ –¥–æ—Å–ø–µ—Ö–∏: —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ö–î
                                try:
                                    armor_class = int(armor_base)
                                except ValueError:
                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –ö–î
                                    pass
                            
                            armor_description = f"{armor_class} ({armor_name})"
                            break
                
                info_text += f"üõ°Ô∏è **–ö–î:** {armor_description}\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç–∞–∫–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if char_data.get('step') == 'finalized':
                    for equipment in char_data.get('equipment', []):
                        if equipment['type'] == 'weapon':
                            weapon_info = self.db.execute_query(
                                "SELECT name, damage, damage_type, properties FROM weapons WHERE id = %s", 
                                (equipment['id'],)
                            )
                            if weapon_info:
                                weapon = weapon_info[0]
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ä—É–∂–∏—è
                                try:
                                    properties = json.loads(weapon['properties']) if weapon['properties'] else []
                                except:
                                    properties = []
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
                                str_mod = self.get_modifier(final_stats.get('strength', 10))
                                dex_mod = self.get_modifier(final_stats.get('dexterity', 10))
                                
                                # –ï—Å–ª–∏ –æ—Ä—É–∂–∏–µ —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
                                if "–§–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ" in properties:
                                    attack_mod = max(str_mod, dex_mod)
                                    damage_mod = max(str_mod, dex_mod)
                                else:
                                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–ª—É
                                    attack_mod = str_mod
                                    damage_mod = str_mod
                                
                                attack_bonus = attack_mod + proficiency_bonus
                                
                                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ç–∞–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —É—Ä–æ–Ω–∞
                                damage_str = str(weapon['damage'])
                                damage_type_str = str(weapon['damage_type'])
                                info_text += f"‚öîÔ∏è **–ê—Ç–∞–∫–∞ ({weapon['name']}):** {attack_bonus:+d} –∫ –∞—Ç–∞–∫–µ, {damage_str}{damage_mod:+d} {damage_type_str}\n"
                    
                    # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π
                    class_info = self.db.execute_query("SELECT is_spellcaster FROM classes WHERE id = %s", (char_data['class_id'],))
                    if class_info and class_info[0]['is_spellcaster']:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        if 'character_id' in char_data:
                            spells = self.db.execute_query("""
                                SELECT s.name, s.level 
                                FROM character_spells cs
                                JOIN spells s ON cs.spell_id = s.id
                                WHERE cs.character_id = %s
                                ORDER BY s.level, s.name
                            """, (char_data['character_id'],))
                            
                            if spells:
                                spells_by_level = {}
                                for spell in spells:
                                    level = spell['level']
                                    if level not in spells_by_level:
                                        spells_by_level[level] = []
                                    spells_by_level[level].append(spell['name'])
                                
                                info_text += "\nüìú **–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:**\n"
                                for level in sorted(spells_by_level.keys()):
                                    level_name = "–ó–∞–≥–æ–≤–æ—Ä—ã" if level == 0 else f"{level} —É—Ä–æ–≤–µ–Ω—å"
                                    spells_list = ", ".join(spells_by_level[level])
                                    info_text += f"‚Ä¢ {level_name}: {spells_list}\n"
                            
            except Exception as e:
                logger.error(f"Error getting additional character info: {e}")
        
        return info_text + "\n" + stats_text
    
    async def update_character_info_display(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        logger.info("Updating character info display")
        
        char_data = context.user_data.get('character_generation')
        if not char_data:
            logger.warning("Character generation data not found")
            return
        
        try:
            character_info = self.format_character_info(char_data)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ
            if 'character_info_message_id' in char_data:
                try:
                    await context.bot.edit_message_text(
                        chat_id=update.effective_chat.id,
                        message_id=char_data['character_info_message_id'],
                        text=character_info,
                        parse_mode='Markdown'
                    )
                except Exception as edit_error:
                    logger.warning(f"Could not edit message, sending new one: {edit_error}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    message = await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=character_info,
                        parse_mode='Markdown'
                    )
                    char_data['character_info_message_id'] = message.message_id
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=character_info,
                    parse_mode='Markdown'
                )
                char_data['character_info_message_id'] = message.message_id
                
        except Exception as e:
            logger.error(f"Error updating character info display: {e}")
    
    async def start_character_generation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        user_id = update.effective_user.id
        logger.info(f"Starting character generation for user {user_id}")
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂ —É –∏–≥—Ä–æ–∫–∞
        existing_char = self.db.execute_query(
            "SELECT id FROM characters WHERE user_id = %s AND is_active = TRUE",
            (user_id,)
        )
        
        if existing_char:
            logger.info(f"User {user_id} already has an active character")
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /deletecharacter —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ.",
                parse_mode='HTML'
            )
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats = self.roll_stats()
        logger.info(f"Generated stats for user {user_id}: {stats}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ context
        context.user_data['character_generation'] = {
            'step': 'name',
            'stats': stats,
            'assigned_stats': {},
            'name': '',
            'race_id': None,
            'origin_id': None,
            'class_id': None,
            'selected_skills': [],
            'equipment': [],
            'stat_adjustments': {}
        }
        
        char_data = context.user_data['character_generation']
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å —ç–º–æ–¥–∑–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        await self.update_character_info_display(update, context)
        
        message = await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:", parse_mode='HTML')
        char_data['name_prompt_message_id'] = message.message_id
    
    async def handle_name_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        if 'character_generation' not in context.user_data:
            logger.warning("No character generation data found for name input")
            return
        
        char_data = context.user_data['character_generation']
        if char_data['step'] != 'name':
            logger.info(f"Wrong step for name input: {char_data['step']}")
            return
        
        name = update.message.text.strip()
        logger.info(f"User entered name: {name}")
        
        if len(name) < 2 or len(name) > 50:
            await update.message.reply_text("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        char_data['name'] = name
        char_data['step'] = 'race'
        logger.info(f"Character name set to: {name}, moving to race selection")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –≤–≤–µ—Å—Ç–∏ –∏–º—è
        if 'name_prompt_message_id' in char_data:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=char_data['name_prompt_message_id']
                )
            except Exception as delete_error:
                logger.warning(f"Could not delete name prompt message: {delete_error}")

        await self.show_race_selection(update, context)
    
    async def show_race_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—ã"""
        logger.info("Showing race selection")
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        races = self.db.execute_query("SELECT id, name FROM races ORDER BY name")
        logger.info(f"Found {len(races)} races in database")
        
        keyboard = []
        for i in range(0, len(races), 2):
            row = []
            for j in range(2):
                if i + j < len(races):
                    race = races[i + j]
                    row.append(InlineKeyboardButton(race['name'], callback_data=f"race_{race['id']}"))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await self.update_character_info_display(update, context)
        
        text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—É –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
        
        char_data = context.user_data.get('character_generation')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_character_text = self.format_character_info(char_data)
        final_character_text = final_character_text.replace("üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n", "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!**\n\n")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=char_data['character_info_message_id'],
            text=final_character_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def handle_race_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—ã"""
        query = update.callback_query
        await query.answer()
        
        if 'character_generation' not in context.user_data:
            logger.warning("No character generation data found for race selection")
            return
        
        char_data = context.user_data['character_generation']
        if char_data['step'] != 'race':
            logger.warning(f"Wrong step for race selection: {char_data['step']}")
            return
        
        race_id = int(query.data.split('_')[1])
        char_data['race_id'] = race_id
        char_data['step'] = 'origin'
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        race_info = self.db.execute_query("SELECT name FROM races WHERE id = %s", (race_id,))
        race_name = race_info[0]['name'] if race_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–∞—Å–∞"
        logger.info(f"User selected race: {race_name} (ID: {race_id})")

        # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—ã
        await query.delete_message()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        await self.update_character_info_display(update, context)
        
        await self.show_origin_selection(update, context)
    
    async def show_origin_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        origins = self.db.execute_query("SELECT id, name, stat_bonuses FROM origins ORDER BY name")
        
        # –ú—ç–ø–ø–∏–Ω–≥ –¥–ª—è –∫—Ä–∞—Ç–∫–∏—Ö –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–π
        stat_short_names = {
            'str': '–°–ò–õ',
            'dex': '–õ–û–í', 
            'con': '–¢–ï–õ',
            'int': '–ò–ù–¢',
            'wis': '–ú–£–î',
            'cha': '–•–ê–†'
        }
        
        keyboard = []
        for origin in origins:
            # –ü–∞—Ä—Å–∏–º –±–æ–Ω—É—Å—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            try:
                stat_bonuses = json.loads(origin['stat_bonuses']) if origin['stat_bonuses'] else {}
                bonus_stats = [stat_short_names.get(stat, stat.upper()) for stat in stat_bonuses.keys()]
                bonus_text = f" ({'/'.join(bonus_stats)})" if bonus_stats else ""
            except:
                bonus_text = ""
            
            button_text = f"{origin['name']}{bonus_text}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"origin_{origin['id']}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        char_data = context.user_data['character_generation']
        text = f"üé≠ <b>{char_data['name']}</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_origin_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è"""
        query = update.callback_query
        await query.answer()
        
        if 'character_generation' not in context.user_data:
            logger.warning("No character generation data found for origin selection")
            return
        
        char_data = context.user_data['character_generation']
        if char_data['step'] != 'origin':
            logger.warning(f"Wrong step for origin selection: {char_data['step']}")
            return
        
        origin_id = int(query.data.split('_')[1])
        char_data['origin_id'] = origin_id
        char_data['step'] = 'stat_assignment'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–∏
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        origin_info = self.db.execute_query("SELECT name, stat_bonuses FROM origins WHERE id = %s", (origin_id,))
        origin_name = origin_info[0]['name'] if origin_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
        logger.info(f"User selected origin: {origin_name} (ID: {origin_id})")
        
        # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        await query.delete_message()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        await self.update_character_info_display(update, context)
        
        await self.show_stat_assignment(update, context)
    
    async def show_stat_assignment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫"""
        char_data = context.user_data['character_generation']
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        origin_info = self.db.execute_query("SELECT stat_bonuses FROM origins WHERE id = %s", (char_data['origin_id'],))
        stat_bonuses = json.loads(origin_info[0]['stat_bonuses']) if origin_info else {}
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
        keyboard = [
            [InlineKeyboardButton("–í–∞—Ä–∏–∞–Ω—Ç 1: +2 –∫ –æ–¥–Ω–æ–π, +1 –∫ –¥—Ä—É–≥–æ–π", callback_data="bonus_2_1")],
            [InlineKeyboardButton("–í–∞—Ä–∏–∞–Ω—Ç 2: +1 –∫ –∫–∞–∂–¥–æ–π –∏–∑ —Ç—Ä–µ—Ö", callback_data="bonus_1_1_1")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        stats_list = ["–°–∏–ª–∞", "–õ–æ–≤–∫–æ—Å—Ç—å", "–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ", "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–ú—É–¥—Ä–æ—Å—Ç—å", "–•–∞—Ä–∏–∑–º–∞"]
        available_stats = [stat for stat in ["str", "dex", "con", "int", "wis", "cha"] if stat in stat_bonuses]
        available_names = [stats_list[["str", "dex", "con", "int", "wis", "cha"].index(stat)] for stat in available_stats]
        
        text = f"""
üìä <b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫</b>

–í–∞—à–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –¥–∞–µ—Ç –±–æ–Ω—É—Å—ã –∫: <b>{', '.join(available_names)}</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:
        """
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_stat_bonus_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        char_data = context.user_data['character_generation']
        bonus_type = query.data.split('_', 1)[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –±–æ–Ω—É—Å–æ–≤
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        origin_info = self.db.execute_query("SELECT stat_bonuses FROM origins WHERE id = %s", (char_data['origin_id'],))
        stat_bonuses = json.loads(origin_info[0]['stat_bonuses']) if origin_info else {}
        available_stats = list(stat_bonuses.keys())
        
        logger.info(f"User selected bonus type: {bonus_type}, available stats: {available_stats}")
        
        char_data['bonus_type'] = bonus_type
        char_data['available_stats'] = available_stats
        
        if bonus_type == "2_1" and len(available_stats) >= 2:
            char_data['step'] = 'select_bonus_stat'
            stat_mapping = {'str': 'strength', 'dex': 'dexterity', 'con': 'constitution', 
                           'int': 'intelligence', 'wis': 'wisdom', 'cha': 'charisma'}
            stats_list = [STAT_NAMES.get(stat_mapping[s], s) for s in available_stats]
            text = f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è +2: {'/'.join(stats_list)}"
            keyboard = [[InlineKeyboardButton(stat, callback_data=f"select_bonus_2_{s}")] for s, stat in zip(available_stats, stats_list)]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=text, reply_markup=reply_markup)
            return
        elif bonus_type == "1_1_1" and len(available_stats) >= 3:
            char_data['stat_adjustments'] = {stat: 1 for stat in available_stats[:3]}
            # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
            await query.delete_message()
            await self.show_class_selection(update, context)
        else:
            char_data['stat_adjustments'] = {}
            # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
            await query.delete_message()
            await self.show_class_selection(update, context)
    
    async def handle_bonus_stat_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –±–æ–Ω—É—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        logger.info(f"Handling bonus stat selection: {query.data}")
        
        char_data = context.user_data['character_generation']
        stat_choice = query.data.split('_')[-1]
        current_bonus_type = len(char_data.get('stat_adjustments', {}))
        
        logger.info(f"Stat choice: {stat_choice}, current bonus count: {current_bonus_type}")
        
        if current_bonus_type == 0:  # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º +2
            char_data['stat_adjustments'] = {stat_choice: 2}
            char_data['available_stats'].remove(stat_choice)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–ª—è +1
            stat_mapping = {'str': 'strength', 'dex': 'dexterity', 'con': 'constitution', 
                           'int': 'intelligence', 'wis': 'wisdom', 'cha': 'charisma'}
            stats_list = [STAT_NAMES.get(stat_mapping[s], s) for s in char_data['available_stats']]
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è +1: " + '/'.join(stats_list)
            keyboard = [[InlineKeyboardButton(stat, callback_data=f"select_bonus_1_{s}")] for s, stat in zip(char_data['available_stats'], stats_list)]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text=text, reply_markup=reply_markup)
            return
        else:  # –ï—Å–ª–∏ –≤—ã–±–∏—Ä–∞–µ–º +1
            char_data['stat_adjustments'][stat_choice] = 1
            
            # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤
            await query.delete_message()
            
            await self.show_class_selection(update, context)

    async def show_class_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞"""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        await self.update_character_info_display(update, context)

        classes = self.db.execute_query("SELECT id, name FROM classes ORDER BY name")
        
        keyboard = []
        for i in range(0, len(classes), 2):
            row = []
            for j in range(2):
                if i + j < len(classes):
                    cls = classes[i + j]
                    row.append(InlineKeyboardButton(cls['name'], callback_data=f"class_{cls['id']}"))
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        char_data = context.user_data['character_generation']
        text = f"‚öîÔ∏è <b>{char_data['name']}</b>, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:"
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_class_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞"""
        query = update.callback_query
        await query.answer()
        
        char_data = context.user_data['character_generation']
        class_id = int(query.data.split('_')[1])
        char_data['class_id'] = class_id
        char_data['step'] = 'skills'
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∞—Å—Å–µ
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        class_info = self.db.execute_query("SELECT name FROM classes WHERE id = %s", (class_id,))
        class_name = class_info[0]['name'] if class_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∞—Å—Å"
        logger.info(f"User selected class: {class_name} (ID: {class_id})")
        
        # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞
        await query.delete_message()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        await self.update_character_info_display(update, context)
        
        await self.show_skill_selection(update, context)
    
    async def show_skill_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤"""
        char_data = context.user_data['character_generation']
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        class_info = self.db.execute_query(
            "SELECT skills_available, skills_count FROM classes WHERE id = %s", 
            (char_data['class_id'],)
        )
        
        if not class_info:
            return
        
        available_skills = json.loads(class_info[0]['skills_available'])
        skills_count = class_info[0]['skills_count']
        
        char_data['available_skills'] = available_skills
        char_data['skills_count'] = skills_count
        char_data['selected_skills'] = []
        
        await self.update_skill_selection(update, context)
    
    async def update_skill_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤"""
        char_data = context.user_data['character_generation']
        available_skills = char_data['available_skills']
        selected_skills = char_data['selected_skills']
        skills_count = char_data['skills_count']
        
        if len(selected_skills) >= skills_count:
            char_data['step'] = 'equipment'
            await self.show_equipment_selection(update, context)
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
        keyboard = []
        for skill in available_skills:
            if skill not in selected_skills and skill != "–ª—é–±—ã–µ —Ç—Ä–∏":
                keyboard.append([InlineKeyboardButton(skill, callback_data=f"skill_{skill}")])
        
        if keyboard:
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            text = f"""
üéØ <b>–í—ã–±–æ—Ä –Ω–∞–≤—ã–∫–æ–≤</b>

–í—ã–±—Ä–∞–Ω–æ: {len(selected_skills)}/{skills_count}
–£–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ: {', '.join(selected_skills) if selected_skills else '–Ω–µ—Ç'}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫:
            """
            
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    async def handle_skill_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–≤—ã–∫–∞"""
        query = update.callback_query
        await query.answer()
        
        char_data = context.user_data['character_generation']
        skill = query.data.split('_', 1)[1]
        
        char_data['selected_skills'].append(skill)
        logger.info(f"User selected skill: {skill}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        await self.update_character_info_display(update, context)
        
        # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –Ω–∞–≤—ã–∫–æ–≤
        await query.delete_message()
        await self.update_skill_selection(update, context)
    
    async def show_equipment_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏"""
        char_data = context.user_data['character_generation']
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –¥–µ–Ω—å–≥–∏ –∏–∑ –∫–ª–∞—Å—Å–∞ –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        class_info = self.db.execute_query("SELECT starting_money FROM classes WHERE id = %s", (char_data['class_id'],))
        origin_info = self.db.execute_query("SELECT starting_money FROM origins WHERE id = %s", (char_data['origin_id'],))
        
        starting_money = (class_info[0]['starting_money'] if class_info else 0) + \
                        (origin_info[0]['starting_money'] if origin_info else 0)
        
        char_data['money'] = starting_money
        char_data['step'] = 'armor'
        
        await self.show_armor_selection(update, context)
    
    def can_use_armor(self, armor_type: str, armor_proficiency: list) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ—Å–ø–µ—Ö"""
        if not armor_proficiency:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if "–≤—Å–µ" in armor_proficiency:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å–ø–µ—Ö–∞
        if armor_type in ["–ª–µ–≥–∫–∏–π", "—Å—Ä–µ–¥–Ω–∏–π", "—Ç—è–∂–µ–ª—ã–π", "—â–∏—Ç"]:
            return armor_type in [prof.replace("–∏–µ", "–∏–π").replace("–∏–µ", "–∏–π") for prof in armor_proficiency]
        
        return False
    
    async def show_armor_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ—Å–ø–µ—Ö–æ–≤"""
        char_data = context.user_data['character_generation']
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –¥–æ—Å–ø–µ—Ö–∞–º–∏ –∫–ª–∞—Å—Å–∞
        class_info = self.db.execute_query("SELECT armor_proficiency FROM classes WHERE id = %s", (char_data['class_id'],))
        armor_prof = json.loads(class_info[0]['armor_proficiency']) if class_info else []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–ø–µ—Ö–∏
        armor_query = "SELECT id, name, price, armor_class, armor_type FROM armor WHERE price <= %s"
        available_armor = self.db.execute_query(armor_query, (char_data['money'],))
        
        keyboard = []
        keyboard.append([InlineKeyboardButton("–ù–µ –ø–æ–∫—É–ø–∞—Ç—å –¥–æ—Å–ø–µ—Ö–∏", callback_data="armor_none")])
        
        for armor in available_armor:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è
            if self.can_use_armor(armor['armor_type'], armor_prof):
                keyboard.append([InlineKeyboardButton(
                    f"{armor['name']} - {armor['price']} –º–æ–Ω–µ—Ç (–ö–î: {armor['armor_class']})", 
                    callback_data=f"armor_{armor['id']}"
                )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
üõ°Ô∏è <b>–í—ã–±–æ—Ä –¥–æ—Å–ø–µ—Ö–æ–≤</b>

–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–Ω–µ—Ç: <b>{char_data['money']}</b>
–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–ø–µ—Ö–∏:
        """
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_armor_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–æ—Å–ø–µ—Ö–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        char_data = context.user_data['character_generation']
        
        if query.data == "armor_none":
            logger.info("User chose no armor")
            await query.delete_message()
        else:
            armor_id = int(query.data.split('_')[1])
            
            if not self.db.connection or not self.db.connection.is_connected():
                self.db.connect()
            
            armor_info = self.db.execute_query("SELECT name, price FROM armor WHERE id = %s", (armor_id,))
            if armor_info:
                armor = armor_info[0]
                char_data['money'] -= armor['price']
                char_data['equipment'].append({'type': 'armor', 'id': armor_id})
                logger.info(f"User bought armor: {armor['name']} for {armor['price']} coins")
                
                await query.delete_message()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        await self.update_character_info_display(update, context)
        
        char_data['step'] = 'weapon'
        await self.show_weapon_selection(update, context)
    
    def can_use_weapon(self, weapon_name: str, weapon_type: str, weapon_properties: str, weapon_proficiency: list) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ä—É–∂–∏–µ"""
        if not weapon_proficiency:
            return False
        
        # –ü–∞—Ä—Å–∏–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ä—É–∂–∏—è
        try:
            properties = json.loads(weapon_properties) if weapon_properties else []
        except:
            properties = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –≤–ª–∞–¥–µ–Ω–∏–µ
        for prof in weapon_proficiency:
            # –ü—Ä–æ—Å—Ç–æ–µ –∏ –≤–æ–∏–Ω—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ
            if prof == "–ø—Ä–æ—Å—Ç–æ–µ" and weapon_type == "–ü—Ä–æ—Å—Ç–æ–µ":
                return True
            if prof == "–≤–æ–∏–Ω—Å–∫–æ–µ" and weapon_type == "–í–æ–∏–Ω—Å–∫–æ–µ":
                return True
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
            if "–∫–æ—Ä–æ—Ç–∫–∏–µ –º–µ—á–∏" in prof and weapon_name == "–ö–æ—Ä–æ—Ç–∫–∏–π –º–µ—á":
                return True
            
            # –ü–ª—É—Ç - –≤–æ–∏–Ω—Å–∫–æ–µ —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ –∏–ª–∏ –ª–µ–≥–∫–æ–µ
            if "–≤–æ–∏–Ω—Å–∫–æ–µ —Å–æ —Å–≤–æ–π—Å—Ç–≤–æ–º —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ –∏–ª–∏ –ª–µ–≥–∫–æ–µ" in prof:
                if weapon_type == "–í–æ–∏–Ω—Å–∫–æ–µ" and ("–§–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ" in properties or "–õ—ë–≥–∫–æ–µ" in properties):
                    return True
        
        return False
    
    async def show_weapon_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è"""
        char_data = context.user_data['character_generation']
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –æ—Ä—É–∂–∏–µ–º –∫–ª–∞—Å—Å–∞
        class_info = self.db.execute_query("SELECT weapon_proficiency FROM classes WHERE id = %s", (char_data['class_id'],))
        weapon_prof = json.loads(class_info[0]['weapon_proficiency']) if class_info else []
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –æ—Ä—É–∂–∏–µ
        weapon_query = "SELECT id, name, price, damage, damage_type, weapon_type, properties FROM weapons WHERE price <= %s"
        available_weapons = self.db.execute_query(weapon_query, (char_data['money'],))
        
        keyboard = []
        keyboard.append([InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="weapon_done")])
        
        for weapon in available_weapons:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è
            if self.can_use_weapon(weapon['name'], weapon['weapon_type'], weapon['properties'], weapon_prof):
                keyboard.append([InlineKeyboardButton(
                    f"{weapon['name']} - {weapon['price']} –º–æ–Ω–µ—Ç ({weapon['damage']} {weapon['damage_type']})", 
                    callback_data=f"weapon_{weapon['id']}"
                )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = f"""
‚öîÔ∏è <b>–í—ã–±–æ—Ä –æ—Ä—É–∂–∏—è</b>

–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–Ω–µ—Ç: <b>{char_data['money']}</b>
–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ:
        """
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    async def handle_weapon_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ä—É–∂–∏—è"""
        query = update.callback_query
        await query.answer()
        
        char_data = context.user_data['character_generation']
        
        if query.data == "weapon_done":
            logger.info("User finished equipment purchase")
            # –£–¥–∞–ª—è–µ–º –æ–∫–Ω–æ –≤—ã–±–æ—Ä–∞ –æ—Ä—É–∂–∏—è
            await query.delete_message()
            await self.finalize_character(update, context)
        else:
            weapon_id = int(query.data.split('_')[1])
            
            if not self.db.connection or not self.db.connection.is_connected():
                self.db.connect()
            
            weapon_info = self.db.execute_query("SELECT name, price FROM weapons WHERE id = %s", (weapon_id,))
            if weapon_info:
                weapon = weapon_info[0]
                if char_data['money'] >= weapon['price']:
                    char_data['money'] -= weapon['price']
                    char_data['equipment'].append({'type': 'weapon', 'id': weapon_id})
                    logger.info(f"User bought weapon: {weapon['name']} for {weapon['price']} coins")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
                    await self.update_character_info_display(update, context)
                    
                    await query.delete_message()
                    await self.show_weapon_selection(update, context)
                else:
                    await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!", show_alert=True)
    
    async def finalize_character(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        char_data = context.user_data['character_generation']
        user_id = update.effective_user.id
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        stats = char_data['stats']
        stat_names = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma']
        final_stats = {}
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for i, stat_name in enumerate(stat_names):
            final_stats[stat_name] = stats[i]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–æ–Ω—É—Å—ã –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è
        stat_adjustments = char_data.get('stat_adjustments', {})
        for stat_code, bonus in stat_adjustments.items():
            stat_mapping = {'str': 'strength', 'dex': 'dexterity', 'con': 'constitution', 
                          'int': 'intelligence', 'wis': 'wisdom', 'cha': 'charisma'}
            if stat_code in stat_mapping:
                final_stats[stat_mapping[stat_code]] += bonus
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö–∏—Ç—ã
        class_info = self.db.execute_query("SELECT hit_die FROM classes WHERE id = %s", (char_data['class_id'],))
        hit_die = class_info[0]['hit_die'] if class_info else 8
        con_modifier = self.get_modifier(final_stats['constitution'])
        max_hp = hit_die + con_modifier
        
        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        character_id = self.db.execute_query("""
            INSERT INTO characters (user_id, name, race_id, origin_id, class_id, level, experience,
                                  strength, dexterity, constitution, intelligence, wisdom, charisma,
                                  hit_points, max_hit_points, money)
            VALUES (%s, %s, %s, %s, %s, 1, 0, %s, %s, %s, %s, %s, %s, %s, %s, %s)
        """, (user_id, char_data['name'], char_data['race_id'], char_data['origin_id'], char_data['class_id'],
              final_stats['strength'], final_stats['dexterity'], final_stats['constitution'],
              final_stats['intelligence'], final_stats['wisdom'], final_stats['charisma'],
              max_hp, max_hp, char_data['money']))
        
        if character_id:
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
            char_id_result = self.db.execute_query("SELECT LAST_INSERT_ID() as id")
            if char_id_result:
                character_id = char_id_result[0]['id']
                
                # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É
                for equipment in char_data['equipment']:
                    self.db.execute_query(
                        "INSERT INTO character_equipment (character_id, item_type, item_id, is_equipped) VALUES (%s, %s, %s, TRUE)",
                        (character_id, equipment['type'], equipment['id'])
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –∫–ª–∞—Å—Å –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å
                class_info = self.db.execute_query("SELECT is_spellcaster FROM classes WHERE id = %s", (char_data['class_id'],))
                if class_info and class_info[0]['is_spellcaster']:
                    # –î–∞–µ–º 2 —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è 0-1 —É—Ä–æ–≤–Ω—è
                    spells = self.db.execute_query("SELECT id FROM spells WHERE level <= 1 ORDER BY RAND() LIMIT 2")
                    for spell in spells:
                        self.db.execute_query(
                            "INSERT INTO character_spells (character_id, spell_id) VALUES (%s, %s)",
                            (character_id, spell['id'])
                        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        char_data['step'] = 'finalized'
        char_data['character_id'] = character_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        final_character_text = self.format_character_info(char_data)
        final_character_text = final_character_text.replace("üé≠ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞**\n\n", "üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!**\n\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ
        keyboard = [[InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data="join_group")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=char_data['character_info_message_id'],
            text=final_character_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del context.user_data['character_generation']
    
    async def show_final_character(self, update: Update, context: ContextTypes.DEFAULT_TYPE, character_id: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ"""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        char_info = self.db.execute_query("""
            SELECT c.*, r.name as race_name, o.name as origin_name, cl.name as class_name
            FROM characters c
            LEFT JOIN races r ON c.race_id = r.id
            LEFT JOIN origins o ON c.origin_id = o.id
            LEFT JOIN classes cl ON c.class_id = cl.id
            WHERE c.id = %s
        """, (character_id,))
        
        if not char_info:
            return
        
        char = char_info[0]
        
        text = f"""
üé≠ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂ —Å–æ–∑–¥–∞–Ω!</b>

üë§ <b>–ò–º—è:</b> {char['name']}
üßù‚Äç‚ôÇÔ∏è <b>–†–∞—Å–∞:</b> {char['race_name']}
üé≠ <b>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</b> {char['origin_name']}
‚öîÔ∏è <b>–ö–ª–∞—Å—Å:</b> {char['class_name']}
üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {char['level']}

<b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>
üí™ –°–∏–ª–∞: {char['strength']} ({self.get_modifier(char['strength']):+d})
üèÉ –õ–æ–≤–∫–æ—Å—Ç—å: {char['dexterity']} ({self.get_modifier(char['dexterity']):+d})
üõ°Ô∏è –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ: {char['constitution']} ({self.get_modifier(char['constitution']):+d})
üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç: {char['intelligence']} ({self.get_modifier(char['intelligence']):+d})
üëÅÔ∏è –ú—É–¥—Ä–æ—Å—Ç—å: {char['wisdom']} ({self.get_modifier(char['wisdom']):+d})
üí¨ –•–∞—Ä–∏–∑–º–∞: {char['charisma']} ({self.get_modifier(char['charisma']):+d})

‚ù§Ô∏è <b>–•–∏—Ç—ã:</b> {char['hit_points']}/{char['max_hit_points']}
üí∞ <b>–ú–æ–Ω–µ—Ç—ã:</b> {char['money']}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ
        keyboard = [[InlineKeyboardButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", callback_data="join_group")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
character_gen = CharacterGenerator()

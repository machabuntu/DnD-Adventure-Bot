#!/usr/bin/env python3
"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.
–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É callback_handler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ callback.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from spell_combat_enhanced import enhanced_spell_combat_manager
from saving_throws import saving_throw_manager

logger = logging.getLogger(__name__)

async def handle_slot_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
    query = update.callback_query
    action_parts = query.data.split('_')
    
    # use_slot_character_id_adventure_id_turn_index_spell_id_slot_level
    if len(action_parts) < 6:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞")
        logger.error(f"Invalid slot selection format: {query.data}")
        return
    
    character_id = int(action_parts[2])
    adventure_id = int(action_parts[3])
    turn_index = int(action_parts[4])
    spell_id = int(action_parts[5])
    slot_level = int(action_parts[6])
    
    logger.info(f"SPELL DEBUG: Character {character_id} selected slot {slot_level} for spell {spell_id}")
    
    await enhanced_spell_combat_manager.handle_slot_selection(
        update, context, character_id, adventure_id, turn_index, spell_id, slot_level
    )
    
    await query.answer()

async def handle_enhanced_spell_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Å–∏–ª–µ–Ω–∏—è."""
    query = update.callback_query
    action_parts = query.data.split('_')
    
    # spell_target_enh_character_id_adventure_id_turn_index_spell_id_target_id_slot_level
    if len(action_parts) < 8:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è")
        logger.error(f"Invalid enhanced spell target format: {query.data}")
        return
    
    character_id = int(action_parts[3])
    adventure_id = int(action_parts[4])
    turn_index = int(action_parts[5])
    spell_id = int(action_parts[6])
    target_id = int(action_parts[7])
    slot_level = int(action_parts[8]) if action_parts[8] != '0' else None
    
    logger.info(f"SPELL DEBUG: Character {character_id} targeting {target_id} with spell {spell_id} (slot {slot_level})")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –∫ —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º —É—Å–∏–ª–µ–Ω–∏—è
    from spell_combat_enhanced import enhanced_spell_combat_manager
    from database import get_db
    
    db = get_db()
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
    spell_query = """
        SELECT name, level, damage, damage_type, description
        FROM spells WHERE id = %s
    """
    spell_info = db.execute_query(spell_query, (spell_id,))
    
    if not spell_info:
        await query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    spell = spell_info[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
    char_query = "SELECT name, level FROM characters WHERE id = %s"
    char_result = db.execute_query(char_query, (character_id,))
    char_name = char_result[0]['name'] if char_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    character_level = char_result[0]['level'] if char_result else 1
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Å–∏–ª–µ–Ω–∏—è
    from spell_scaling import apply_spell_scaling_in_combat
    
    scaling = apply_spell_scaling_in_combat(
        spell_id,
        spell['damage'],
        slot_level=slot_level,
        character_level=character_level if spell['level'] == 0 else None
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
    target_query = "SELECT name, current_hp, armor_class FROM enemies WHERE id = %s"
    target_result = db.execute_query(target_query, (target_id,))
    
    if not target_result:
        await query.edit_message_text("‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    target = target_result[0]
    target_name = target['name']
    target_ac = target['armor_class'] or 12
    
    spell_name = spell['name']
    if slot_level and slot_level > spell['level']:
        spell_name += f" (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
    
    result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '{spell_name}' –Ω–∞ {target_name}!\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
    spell_query_full = """
        SELECT saving_throw FROM spells WHERE id = %s
    """
    spell_full = db.execute_query(spell_query_full, (spell_id,))
    
    if spell_full and spell_full[0].get('saving_throw'):
        # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ –≤–º–µ—Å—Ç–æ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏
        save_success, save_text = saving_throw_manager.process_spell_saving_throw(
            spell_id, character_id, target_id, 'enemy'
        )
        
        result_text += f"\n{save_text}\n"
        
        if spell['damage']:
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(scaling['damage'])
            
            if save_success:
                # –£—Å–ø–µ—à–Ω—ã–π —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ - –ø–æ–ª–æ–≤–∏–Ω–∞ —É—Ä–æ–Ω–∞
                damage_taken = damage_result['total'] // 2
                result_text += f"\nüí• –£—Ä–æ–Ω (–ø–æ–ª–æ–≤–∏–Ω–∞): {damage_taken} {spell['damage_type']} —É—Ä–æ–Ω–∞"
            else:
                # –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–π —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ - –ø–æ–ª–Ω—ã–π —É—Ä–æ–Ω
                damage_taken = damage_result['total']
                result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, target['current_hp'] - damage_taken)
            db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                            (new_hp, target_id))
            
            if new_hp <= 0:
                result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏
    elif spell_name in ["–û–≥–Ω–µ–Ω–Ω—ã–π —Å–Ω–∞—Ä—è–¥", "–õ–µ–¥—è–Ω–æ–π –ª—É—á", "–°–≥–ª–∞–∑", "–í–µ–¥—å–º–∏–Ω —Å–Ω–∞—Ä—è–¥"]:
        # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏
        from dice_utils import calculate_modifier, roll_d20, is_critical_hit, is_critical_miss
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è
        char_stats_query = """
            SELECT c.intelligence, c.wisdom, c.charisma, cl.name as class_name
            FROM characters c
            JOIN classes cl ON c.class_id = cl.id
            WHERE c.id = %s
        """
        
        char_stats = db.execute_query(char_stats_query, (character_id,))
        if not char_stats:
            spell_modifier = 0
        else:
            stats = char_stats[0]
            class_name = stats['class_name']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è
            if class_name in ["–í–æ–ª—à–µ–±–Ω–∏–∫"]:
                spell_modifier = calculate_modifier(stats['intelligence'])
            elif class_name in ["–ñ—Ä–µ—Ü", "–î—Ä—É–∏–¥", "–°–ª–µ–¥–æ–ø—ã—Ç"]:
                spell_modifier = calculate_modifier(stats['wisdom'])
            else:  # –ë–∞—Ä–¥, –ß–∞—Ä–æ–¥–µ–π, –ö–æ–ª–¥—É–Ω, –ü–∞–ª–∞–¥–∏–Ω
                spell_modifier = calculate_modifier(stats['charisma'])
        
        proficiency_bonus = 2 + (character_level - 1) // 4  # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        spell_attack_bonus = spell_modifier + proficiency_bonus
        
        attack_roll_result, attack_breakdown = roll_d20(spell_attack_bonus)
        raw_roll = attack_roll_result - spell_attack_bonus
        
        result_text += f"üé≤ –ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º: {attack_breakdown} –ø—Ä–æ—Ç–∏–≤ AC {target_ac}"
        
        if is_critical_hit(raw_roll):
            result_text += f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï! (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 20)"
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(scaling['damage'], critical=True)
            result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, target['current_hp'] - damage_result['total'])
            db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                            (new_hp, target_id))
            
            if new_hp <= 0:
                result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
            
        elif is_critical_miss(raw_roll):
            result_text += f"\nüí® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–ú–ê–•! (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 1)"
            
        elif attack_roll_result >= target_ac:
            result_text += f"\n‚úÖ –ü–û–ü–ê–î–ê–ù–ò–ï!"
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(scaling['damage'])
            result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, target['current_hp'] - damage_result['total'])
            db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                            (new_hp, target_id))
            
            if new_hp <= 0:
                result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
        else:
            result_text += f"\n‚ùå –ü–†–û–ú–ê–•!"
    else:
        # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—â–∏–µ –∏–ª–∏ —Ç—Ä–µ–±—É—é—â–∏–µ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
        if spell['damage']:
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(scaling['damage'])
            
            if spell.get('saving_throw'):
                result_text += f"\n‚ö° –¶–µ–ª—å –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–µ—Ä—à–∏—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ {spell['saving_throw']}!"
            else:
                result_text += f"\n‚ú® –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞–µ—Ç!"
            
            result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, target['current_hp'] - damage_result['total'])
            db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                            (new_hp, target_id))
            
            if new_hp <= 0:
                result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
    
    await query.edit_message_text(result_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∂–∏–≤—ã–µ –≤—Ä–∞–≥–∏
    alive_enemies_query = "SELECT COUNT(*) as count FROM enemies WHERE adventure_id = %s AND current_hp > 0"
    alive_enemies = db.execute_query(alive_enemies_query, (adventure_id,))
    
    if alive_enemies and alive_enemies[0]['count'] == 0:
        from combat_manager import combat_manager
        await combat_manager.end_combat(query, adventure_id, victory='players')
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
        from combat_manager import combat_manager
        await combat_manager.next_turn(update, context, adventure_id, turn_index)
    
    await query.answer()

async def handle_beam_target_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –¥–ª—è –ª—É—á–∞ –∑–∞–≥–æ–≤–æ—Ä–∞."""
    query = update.callback_query
    action_parts = query.data.split('_')
    
    # beam_target_character_id_adventure_id_turn_index_spell_id_target_id_beam_number
    if len(action_parts) < 7:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–ª–∏ –ª—É—á–∞")
        logger.error(f"Invalid beam target format: {query.data}")
        return
    
    character_id = int(action_parts[2])
    adventure_id = int(action_parts[3])
    turn_index = int(action_parts[4])
    spell_id = int(action_parts[5])
    target_id = int(action_parts[6])
    beam_number = int(action_parts[7])
    
    logger.info(f"SPELL DEBUG: Character {character_id} beam {beam_number} targeting {target_id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Ü–µ–ª—å –¥–ª—è —ç—Ç–æ–≥–æ –ª—É—á–∞
    context_key = f"beam_targets_{character_id}_{spell_id}"
    
    if context_key not in context.chat_data:
        context.chat_data[context_key] = {
            'targets': [],
            'num_beams': 1,
            'current_beam': 1
        }
    
    beam_data = context.chat_data[context_key]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ª—É—á–∞
    from database import get_db
    db = get_db()
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    target_query = "SELECT name FROM enemies WHERE id = %s"
    target_result = db.execute_query(target_query, (target_id,))
    
    if target_result:
        beam_data['targets'].append({
            'id': target_id,
            'name': target_result[0]['name'],
            'beam': beam_number
        })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –ª—É—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã
    if beam_number < beam_data['num_beams']:
        # –ï—â–µ –µ—Å—Ç—å –ª—É—á–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        beam_data['current_beam'] = beam_number + 1
        await enhanced_spell_combat_manager._select_beam_targets(
            update, character_id, adventure_id, turn_index, spell_id,
            None, None, None, None  # –≠—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω—ã –∑–∞–Ω–æ–≤–æ
        )
    else:
        # –í—Å–µ –ª—É—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –∞—Ç–∞–∫–∏
        await execute_beam_attacks(update, context, character_id, adventure_id, 
                                  turn_index, spell_id, beam_data['targets'])
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ª—É—á–∞—Ö
        del context.chat_data[context_key]
    
    await query.answer()

async def execute_beam_attacks(update: Update, context: ContextTypes.DEFAULT_TYPE,
                              character_id: int, adventure_id: int, turn_index: int,
                              spell_id: int, targets: list):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–∞–∫–∏ –≤—Å–µ–º–∏ –ª—É—á–∞–º–∏ –∑–∞–≥–æ–≤–æ—Ä–∞."""
    from database import get_db
    from dice_utils import calculate_modifier, roll_d20, is_critical_hit, is_critical_miss
    
    db = get_db()
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
    char_query = "SELECT name, level FROM characters WHERE id = %s"
    char_result = db.execute_query(char_query, (character_id,))
    char_name = char_result[0]['name'] if char_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    character_level = char_result[0]['level'] if char_result else 1
    
    spell_query = "SELECT name, damage, damage_type FROM spells WHERE id = %s"
    spell_result = db.execute_query(spell_query, (spell_id,))
    
    if not spell_result:
        await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
        return
    
    spell = spell_result[0]
    spell_name = spell['name']
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
    from spell_scaling import get_cantrip_scaling
    scaling = get_cantrip_scaling(spell_id, character_level)
    damage_dice = scaling.get('damage_dice', spell['damage'])
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Ç–∞–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º
    char_stats_query = """
        SELECT c.intelligence, c.wisdom, c.charisma, cl.name as class_name
        FROM characters c
        JOIN classes cl ON c.class_id = cl.id
        WHERE c.id = %s
    """
    
    char_stats = db.execute_query(char_stats_query, (character_id,))
    if not char_stats:
        spell_modifier = 0
    else:
        stats = char_stats[0]
        class_name = stats['class_name']
        
        if class_name in ["–í–æ–ª—à–µ–±–Ω–∏–∫"]:
            spell_modifier = calculate_modifier(stats['intelligence'])
        elif class_name in ["–ñ—Ä–µ—Ü", "–î—Ä—É–∏–¥", "–°–ª–µ–¥–æ–ø—ã—Ç"]:
            spell_modifier = calculate_modifier(stats['wisdom'])
        else:
            spell_modifier = calculate_modifier(stats['charisma'])
    
    proficiency_bonus = 2 + (character_level - 1) // 4
    spell_attack_bonus = spell_modifier + proficiency_bonus
    
    result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}'!\n"
    result_text += f"–í—ã–ø—É—Å–∫–∞–µ—Ç {len(targets)} –ª—É—á–µ–π:\n\n"
    
    enemies_defeated = []
    
    for i, target_info in enumerate(targets, 1):
        target_id = target_info['id']
        target_name = target_info['name']
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ HP –∏ AC —Ü–µ–ª–∏
        enemy_query = "SELECT current_hp, armor_class FROM enemies WHERE id = %s"
        enemy_result = db.execute_query(enemy_query, (target_id,))
        
        if not enemy_result or enemy_result[0]['current_hp'] <= 0:
            result_text += f"–õ—É—á {i}: {target_name} - —Ü–µ–ª—å —É–∂–µ –ø–æ–≤–µ—Ä–∂–µ–Ω–∞\n"
            continue
        
        enemy = enemy_result[0]
        target_ac = enemy['armor_class'] or 12
        
        # –ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª—É—á–∞
        attack_roll_result, attack_breakdown = roll_d20(spell_attack_bonus)
        raw_roll = attack_roll_result - spell_attack_bonus
        
        result_text += f"–õ—É—á {i} ‚Üí {target_name}: {attack_breakdown} vs AC {target_ac}"
        
        if is_critical_hit(raw_roll):
            result_text += " - –ö–†–ò–¢! "
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(damage_dice, critical=True)
            result_text += f"{damage_result['text']} —É—Ä–æ–Ω–∞\n"
            damage_total = damage_result['total']
        elif is_critical_miss(raw_roll):
            result_text += " - –∫—Ä–∏—Ç. –ø—Ä–æ–º–∞—Ö!\n"
            damage_total = 0
        elif attack_roll_result >= target_ac:
            result_text += " - –ø–æ–ø–∞–¥–∞–Ω–∏–µ! "
            damage_result = enhanced_spell_combat_manager._roll_spell_damage(damage_dice)
            result_text += f"{damage_result['text']} —É—Ä–æ–Ω–∞\n"
            damage_total = damage_result['total']
        else:
            result_text += " - –ø—Ä–æ–º–∞—Ö!\n"
            damage_total = 0
        
        if damage_total > 0:
            new_hp = max(0, enemy['current_hp'] - damage_total)
            db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                           (new_hp, target_id))
            
            if new_hp <= 0:
                enemies_defeated.append(target_name)
    
    if enemies_defeated:
        result_text += f"\nüíÄ –ü–æ–≤–µ—Ä–∂–µ–Ω—ã: {', '.join(enemies_defeated)}"
    
    await update.callback_query.edit_message_text(result_text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
    alive_enemies_query = "SELECT COUNT(*) as count FROM enemies WHERE adventure_id = %s AND current_hp > 0"
    alive_enemies = db.execute_query(alive_enemies_query, (adventure_id,))
    
    if alive_enemies and alive_enemies[0]['count'] == 0:
        from combat_manager import combat_manager
        await combat_manager.end_combat(update.callback_query, adventure_id, victory='players')
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É
        from combat_manager import combat_manager
        await combat_manager.next_turn(update, context, adventure_id, turn_index)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_enhanced_callbacks(application):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π."""
    from telegram.ext import CallbackQueryHandler
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
    application.add_handler(CallbackQueryHandler(
        handle_slot_selection,
        pattern=r'^use_slot_\d+_\d+_\d+_\d+_\d+$'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
    application.add_handler(CallbackQueryHandler(
        handle_enhanced_spell_target,
        pattern=r'^spell_target_enh_\d+_\d+_\d+_\d+_\d+_\d+$'
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ª—É—á–µ–π –∑–∞–≥–æ–≤–æ—Ä–æ–≤
    application.add_handler(CallbackQueryHandler(
        handle_beam_target_selection,
        pattern=r'^beam_target_\d+_\d+_\d+_\d+_\d+_\d+$'
    ))
    
    logger.info("Enhanced spell callbacks registered")

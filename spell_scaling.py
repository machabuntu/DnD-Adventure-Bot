#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–∏–ª–µ–Ω–∏–µ –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —É—Å–∏–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π —á–µ—Ä–µ–∑ —Å–ª–æ—Ç—ã.
"""

import json
import logging
import re
from database import execute_query

logger = logging.getLogger(__name__)

def get_cantrip_scaling(spell_id: int, character_level: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
    
    Args:
        spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        character_level: –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É—Å–∏–ª–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–∏–ª–µ–Ω–∏—è –¥–ª—è –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
        scaling_data = execute_query("""
            SELECT damage_dice, num_beams, other_effects
            FROM cantrip_scaling
            WHERE spell_id = %s AND character_level <= %s
            ORDER BY character_level DESC
            LIMIT 1
        """, (spell_id, character_level))
        
        if scaling_data:
            data = scaling_data[0]
            result = {
                'damage_dice': data['damage_dice'],
                'num_beams': data['num_beams']
            }
            
            if data['other_effects']:
                result['other_effects'] = json.loads(data['other_effects'])
            
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–≥–æ–≤–æ—Ä–∞ {spell_id}: {e}")
    
    return {}

def get_spell_slot_scaling(spell_id: int, slot_level: int) -> dict:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–ª–æ—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.
    
    Args:
        spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        slot_level: –£—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–ª–æ—Ç–∞
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —É—Å–∏–ª–µ–Ω–∏—è
    """
    try:
        scaling_data = execute_query("""
            SELECT damage_bonus, duration_bonus, target_bonus, other_effects
            FROM spell_slot_scaling
            WHERE spell_id = %s AND slot_level = %s
        """, (spell_id, slot_level))
        
        if scaling_data:
            data = scaling_data[0]
            result = {}
            
            if data['damage_bonus']:
                result['damage_bonus'] = data['damage_bonus']
            if data['duration_bonus']:
                result['duration_bonus'] = data['duration_bonus']
            if data['target_bonus']:
                result['target_bonus'] = data['target_bonus']
            if data['other_effects']:
                result['other_effects'] = json.loads(data['other_effects'])
            
            return result
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è {spell_id} –¥–ª—è —Å–ª–æ—Ç–∞ {slot_level}: {e}")
    
    return {}

def get_spell_scaling_rules(spell_id: int) -> list:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å–∏–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.
    
    Args:
        spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        
    Returns:
        –°–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª —É—Å–∏–ª–µ–Ω–∏—è
    """
    try:
        rules = execute_query("""
            SELECT rule_type, rule_value, rule_description
            FROM spell_scaling_rules
            WHERE spell_id = %s
        """, (spell_id,))
        
        return rules or []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª —É—Å–∏–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è {spell_id}: {e}")
        return []

def calculate_scaled_damage(base_damage: str, scaling: dict, character_level: int = None) -> str:
    """
    –í—ã—á–∏—Å–ª—è–µ—Ç —É—Å–∏–ª–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.
    
    Args:
        base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1d10")
        scaling: –î–∞–Ω–Ω—ã–µ —É—Å–∏–ª–µ–Ω–∏—è
        character_level: –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤)
        
    Returns:
        –£—Å–∏–ª–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    # –î–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º damage_dice –∏–∑ scaling
    if 'damage_dice' in scaling and scaling['damage_dice']:
        return scaling['damage_dice']
    
    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–π —É—Ä–æ–Ω
    if 'damage_bonus' in scaling and scaling['damage_bonus']:
        # –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        base_match = re.match(r'(\d+)d(\d+)(?:\+(\d+))?', base_damage)
        bonus_match = re.match(r'\+(\d+)d(\d+)', scaling['damage_bonus'])
        
        if base_match and bonus_match:
            base_num = int(base_match.group(1))
            base_die = int(base_match.group(2))
            base_mod = int(base_match.group(3) or 0)
            
            bonus_num = int(bonus_match.group(1))
            bonus_die = int(bonus_match.group(2))
            
            # –ï—Å–ª–∏ –∫–æ—Å—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if base_die == bonus_die:
                total_num = base_num + bonus_num
                if base_mod:
                    return f"{total_num}d{base_die}+{base_mod}"
                else:
                    return f"{total_num}d{base_die}"
            else:
                # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
                if base_mod:
                    return f"{base_damage} + {bonus_num}d{bonus_die}"
                else:
                    return f"{base_damage} + {bonus_num}d{bonus_die}"
    
    return base_damage

def get_spell_description_with_scaling(spell_id: int, slot_level: int = None, character_level: int = None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å —É—á–µ—Ç–æ–º —É—Å–∏–ª–µ–Ω–∏—è.
    
    Args:
        spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        slot_level: –£—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–ª–æ—Ç–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π)
        character_level: –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤)
        
    Returns:
        –û–ø–∏—Å–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º —É—Å–∏–ª–µ–Ω–∏—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_data = execute_query("""
            SELECT name, level, damage, description, scaling_type
            FROM spells
            WHERE id = %s
        """, (spell_id,))
        
        if not spell_data:
            return ""
        
        spell = spell_data[0]
        description_parts = []
        
        # –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
        if spell['description']:
            description_parts.append(spell['description'])
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤
        if spell['level'] == 0 and character_level:
            scaling = get_cantrip_scaling(spell_id, character_level)
            if scaling:
                if 'damage_dice' in scaling:
                    description_parts.append(f"üí• –£—Ä–æ–Ω –Ω–∞ {character_level} —É—Ä–æ–≤–Ω–µ: {scaling['damage_dice']}")
                if 'num_beams' in scaling and scaling['num_beams']:
                    description_parts.append(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—É—á–µ–π: {scaling['num_beams']}")
                if 'other_effects' in scaling:
                    effects = scaling['other_effects']
                    if 'description' in effects:
                        description_parts.append(f"‚ú® {effects['description']}")
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        elif spell['level'] > 0 and slot_level and slot_level > spell['level']:
            scaling = get_spell_slot_scaling(spell_id, slot_level)
            if scaling:
                description_parts.append(f"\nüìà –£—Å–∏–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–º {slot_level} —É—Ä–æ–≤–Ω—è:")
                
                if 'damage_bonus' in scaling:
                    scaled_damage = calculate_scaled_damage(spell['damage'] or "0", scaling)
                    description_parts.append(f"  üí• –£—Ä–æ–Ω: {scaled_damage}")
                
                if 'target_bonus' in scaling:
                    description_parts.append(f"  üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–µ–ª–∏: +{scaling['target_bonus']}")
                
                if 'other_effects' in scaling:
                    effects = scaling['other_effects']
                    for key, value in effects.items():
                        description_parts.append(f"  ‚ú® {value}")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        rules = get_spell_scaling_rules(spell_id)
        if rules:
            description_parts.append("\nüìú –ü—Ä–∞–≤–∏–ª–∞ —É—Å–∏–ª–µ–Ω–∏—è:")
            for rule in rules:
                description_parts.append(f"  ‚Ä¢ {rule['rule_description']}")
        
        return "\n".join(description_parts)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è {spell_id} —Å —É—Å–∏–ª–µ–Ω–∏–µ–º: {e}")
        return ""

def apply_spell_scaling_in_combat(spell_id: int, base_damage: str, slot_level: int = None, 
                                 character_level: int = None, num_targets: int = 1) -> dict:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É—Å–∏–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–µ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–æ–≤.
    
    Args:
        spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        base_damage: –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω
        slot_level: –£—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–ª–æ—Ç–∞
        character_level: –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        num_targets: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π (–±–∞–∑–æ–≤–æ–µ)
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —É—Å–∏–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    """
    result = {
        'damage': base_damage,
        'num_targets': num_targets,
        'num_attacks': 1,
        'special_effects': []
    }
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_data = execute_query("""
            SELECT level, scaling_type
            FROM spells
            WHERE id = %s
        """, (spell_id,))
        
        if not spell_data:
            return result
        
        spell = spell_data[0]
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –∑–∞–≥–æ–≤–æ—Ä–æ–≤
        if spell['level'] == 0 and character_level:
            scaling = get_cantrip_scaling(spell_id, character_level)
            if scaling:
                if 'damage_dice' in scaling:
                    result['damage'] = scaling['damage_dice']
                if 'num_beams' in scaling and scaling['num_beams']:
                    result['num_attacks'] = scaling['num_beams']
                if 'other_effects' in scaling:
                    result['special_effects'].append(scaling['other_effects'])
        
        # –£—Å–∏–ª–µ–Ω–∏–µ –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        elif spell['level'] > 0 and slot_level and slot_level > spell['level']:
            scaling = get_spell_slot_scaling(spell_id, slot_level)
            if scaling:
                if 'damage_bonus' in scaling:
                    result['damage'] = calculate_scaled_damage(base_damage, scaling)
                if 'target_bonus' in scaling:
                    result['num_targets'] += scaling['target_bonus']
                if 'other_effects' in scaling:
                    result['special_effects'].append(scaling['other_effects'])
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞
        rules = get_spell_scaling_rules(spell_id)
        for rule in rules:
            if rule['rule_type'] == 'missiles_per_slot' and slot_level:
                # –î–ª—è Magic Missile –∏ –ø–æ–¥–æ–±–Ω—ã—Ö
                spell_level = spell['level']
                if slot_level > spell_level:
                    additional = (slot_level - spell_level)
                    result['num_attacks'] += additional
            elif rule['rule_type'] == 'rays_per_slot' and slot_level:
                # –î–ª—è Scorching Ray –∏ –ø–æ–¥–æ–±–Ω—ã—Ö
                spell_level = spell['level']
                if slot_level > spell_level:
                    additional = (slot_level - spell_level)
                    result['num_attacks'] += additional
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —É—Å–∏–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è {spell_id}: {e}")
    
    return result

def format_spell_with_scaling(spell_name: str, slot_level: int = None, character_level: int = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è —É—Å–∏–ª–µ–Ω–∏—è.
    
    Args:
        spell_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        slot_level: –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ—Ç–∞ (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π)
        character_level: –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤)
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    """
    if slot_level:
        return f"{spell_name} (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
    elif character_level:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —É—Å–∏–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –Ω–∞ –∫–ª—é—á–µ–≤—ã—Ö —É—Ä–æ–≤–Ω—è—Ö
        if character_level >= 17:
            return f"{spell_name} (4-–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã)"
        elif character_level >= 11:
            return f"{spell_name} (3-–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã)"
        elif character_level >= 5:
            return f"{spell_name} (2-–π —É—Ä–æ–≤–µ–Ω—å —Å–∏–ª—ã)"
    
    return spell_name

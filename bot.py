import logging
import json
from telegram import Update, BotCommand
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from config import TELEGRAM_BOT_TOKEN, ALLOWED_CHAT_ID
from character_generation import character_gen
from adventure_manager import adventure_manager
from database import get_db
from action_handler import action_handler
from callback_handler import handle_callback_query

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configure httpx logging to only show errors (4xx, 5xx) and warnings
httpx_logger = logging.getLogger("httpx")
httpx_logger.setLevel(logging.WARNING)  # This will only show WARNING and above (including ERROR)

# Alternative approach: Set up a custom filter for httpx
class HTTPXFilter(logging.Filter):
    def filter(self, record):
        # Only show logs that contain error status codes (4xx, 5xx) or are not HTTP request logs
        if "HTTP Request:" in record.getMessage():
            # Check if the message contains error codes
            message = record.getMessage()
            if any(code in message for code in ["4", "5"]) and any(status in message for status in ["40", "41", "42", "43", "44", "45", "50", "51", "52", "53"]):
                return True  # Show 4xx and 5xx errors
            else:
                return False  # Hide successful 2xx requests
        return True  # Show all other logs

# Apply the filter to httpx logger
httpx_logger.addFilter(HTTPXFilter())

# Emoji –¥–ª—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
STAT_EMOJIS = {
    'strength': 'üêÇ',      # –ë—ã–∫ - –°–∏–ª–∞
    'dexterity': 'üê±',     # –ö–æ—Ç - –õ–æ–≤–∫–æ—Å—Ç—å  
    'constitution': 'üêª',  # –ú–µ–¥–≤–µ–¥—å - –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ
    'intelligence': 'ü¶ä',  # –õ–∏—Å–∞ - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
    'wisdom': 'ü¶â',        # –°–æ–≤–∞ - –ú—É–¥—Ä–æ—Å—Ç—å
    'charisma': 'ü¶Ö'       # –û—Ä—ë–ª - –•–∞—Ä–∏–∑–º–∞
}

# –ù–∞–∑–≤–∞–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
STAT_NAMES = {
    'strength': '–°–∏–ª–∞',
    'dexterity': '–õ–æ–≤–∫–æ—Å—Ç—å',
    'constitution': '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ', 
    'intelligence': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
    'wisdom': '–ú—É–¥—Ä–æ—Å—Ç—å',
    'charisma': '–•–∞—Ä–∏–∑–º–∞'
}

def get_modifier(stat: int) -> int:
    """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    return (stat - 10) // 2

def format_character_display(char: dict, db) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –∏ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è)
    stats_text = "\nüìä <b>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>\n"
    stat_names = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma']
    
    for stat_name in stat_names:
        emoji = STAT_EMOJIS.get(stat_name, '‚ùì')
        ru_name = STAT_NAMES.get(stat_name, stat_name)
        value = char.get(stat_name, 10)
        modifier = get_modifier(value)
        stats_text += f"{emoji} <b>{ru_name}:</b> {value} ({modifier:+d})\n"
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /character
    info_text = "üé≠ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ</b>\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    info_text += f"üë§ <b>–ò–º—è:</b> {char['name']}\n"
    info_text += f"üßù‚Äç‚ôÇÔ∏è <b>–†–∞—Å–∞:</b> {char['race_name']}\n"
    info_text += f"üé≠ <b>–ü—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ:</b> {char['origin_name']}\n"
    info_text += f"‚öîÔ∏è <b>–ö–ª–∞—Å—Å:</b> {char['class_name']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ –æ–ø—ã—Ç (–Ω–æ–≤—ã–µ –ø–æ–ª—è)
    info_text += f"üìä <b>–£—Ä–æ–≤–µ–Ω—å:</b> {char['level']}\n"
    info_text += f"‚≠ê <b>–û–ø—ã—Ç:</b> {char['experience']}\n"
    
    # –ù–∞–≤—ã–∫–∏ (–ø–æ–ª—É—á–∞–µ–º –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã character_skills)
    try:
        skills_query = "SELECT skill_name FROM character_skills WHERE character_id = %s"
        skills_result = db.execute_query(skills_query, (char['id'],))
        
        if skills_result:
            skills_info = [skill['skill_name'] for skill in skills_result]
            skills_text = ", ".join(skills_info)
            info_text += f"üéØ <b>–ù–∞–≤—ã–∫–∏:</b> {skills_text}\n"
        else:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –±–µ–∑ –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ
            info_text += f"üéØ <b>–ù–∞–≤—ã–∫–∏:</b> –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã (—Å—Ç–∞—Ä—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂)\n"
            
    except Exception as e:
        logger.error(f"Error getting skills info: {e}")
    
    # –î–µ–Ω—å–≥–∏
    info_text += f"üí∞ <b>–î–µ–Ω—å–≥–∏:</b> {char.get('money', 0)} –º–æ–Ω–µ—Ç\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å–ø–µ—Ö–æ–≤ –∏ –æ—Ä—É–∂–∏—è –¥–ª—è —ç–∫–∏–ø–∏—Ä–æ–≤–∫–∏
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    equipment_query = """
        SELECT ce.item_type, ce.item_id, ce.is_equipped,
               CASE 
                   WHEN ce.item_type = 'armor' THEN a.name
                   WHEN ce.item_type = 'weapon' THEN w.name
               END as item_name,
               CASE 
                   WHEN ce.item_type = 'weapon' THEN w.damage
                   ELSE NULL
               END as damage,
               CASE 
                   WHEN ce.item_type = 'weapon' THEN w.damage_type
                   ELSE NULL
               END as damage_type
        FROM character_equipment ce
        LEFT JOIN armor a ON ce.item_type = 'armor' AND ce.item_id = a.id
        LEFT JOIN weapons w ON ce.item_type = 'weapon' AND ce.item_id = w.id
        WHERE ce.character_id = %s
    """
    
    equipment = db.execute_query(equipment_query, (char['id'],))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —ç–∫–∏–ø–∏—Ä–æ–≤–∫—É –≤ —Ç–æ–º –∂–µ —Å—Ç–∏–ª–µ, —á—Ç–æ –∏ –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è
    if equipment:
        for item in equipment:
            if item['item_type'] == 'armor':
                info_text += f"üõ°Ô∏è <b>–î–æ—Å–ø–µ—Ö–∏:</b> {item['item_name']}\n"
            elif item['item_type'] == 'weapon':
                damage_text = f" ({item['damage']} {item['damage_type']})" if item['damage'] and item['damage_type'] else ""
                info_text += f"‚öîÔ∏è <b>–û—Ä—É–∂–∏–µ:</b> {item['item_name']}{damage_text}\n"
    
    # –ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
    info_text += f"üéØ <b>–ë–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞:</b> +{char.get('proficiency_bonus', 2)}\n"
    
    # –ö–ª–∞—Å—Å –¥–æ—Å–ø–µ—Ö–æ–≤ (—Å —É—á–µ—Ç–æ–º –¥–æ—Å–ø–µ—Ö–æ–≤)
    armor_class = 10 + get_modifier(char.get('dexterity', 10))
    armor_description = f"{armor_class}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ—Å–ø–µ—Ö–æ–≤ –¥–ª—è –ö–î
    armor_query = """
        SELECT a.armor_class, a.name 
        FROM character_equipment ce
        INNER JOIN armor a ON ce.item_id = a.id
        WHERE ce.character_id = %s AND ce.item_type = 'armor' AND ce.is_equipped = TRUE
    """
    
    equipped_armor = db.execute_query(armor_query, (char['id'],))
    
    if equipped_armor:
        armor_base = equipped_armor[0]['armor_class']
        armor_name = equipped_armor[0]['name']
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ö–î –¥–æ—Å–ø–µ—Ö–æ–≤
        if "+" in armor_base:
            if "–º–∞–∫—Å" in armor_base:
                # –°—Ä–µ–¥–Ω–∏–µ –¥–æ—Å–ø–µ—Ö–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
                base_ac = int(armor_base.split()[0])
                max_dex = int(armor_base.split("–º–∞–∫—Å ")[1].split(")")[0])
                dex_mod = min(get_modifier(char.get('dexterity', 10)), max_dex)
                armor_class = base_ac + dex_mod
            else:
                # –õ–µ–≥–∫–∏–µ –¥–æ—Å–ø–µ—Ö–∏
                base_ac = int(armor_base.split()[0])
                armor_class = base_ac + get_modifier(char.get('dexterity', 10))
        elif armor_base.startswith("+"):
            # –©–∏—Ç
            armor_class += int(armor_base[1:])
        else:
            # –¢—è–∂–µ–ª—ã–µ –¥–æ—Å–ø–µ—Ö–∏
            try:
                armor_class = int(armor_base)
            except ValueError:
                pass
        
        armor_description = f"{armor_class} ({armor_name})"
    
    info_text += f"üõ°Ô∏è <b>–ö–î:</b> {armor_description}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Ç–∞–∫–µ (–∫–∞–∫ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    weapon_query = """
        SELECT w.name, w.damage, w.damage_type, w.properties
        FROM character_equipment ce
        INNER JOIN weapons w ON ce.item_id = w.id
        WHERE ce.character_id = %s AND ce.item_type = 'weapon' AND ce.is_equipped = TRUE
    """
    
    equipped_weapons = db.execute_query(weapon_query, (char['id'],))
    
    if equipped_weapons:
        for weapon in equipped_weapons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –æ—Ä—É–∂–∏—è
            try:
                properties = json.loads(weapon['properties']) if weapon['properties'] else []
            except:
                properties = []
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –∞—Ç–∞–∫–∏
            str_mod = get_modifier(char.get('strength', 10))
            dex_mod = get_modifier(char.get('dexterity', 10))
            
            # –ï—Å–ª–∏ –æ—Ä—É–∂–∏–µ —Ñ–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª—É—á—à–∏–π –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
            if "–§–µ—Ö—Ç–æ–≤–∞–ª—å–Ω–æ–µ" in properties:
                attack_mod = max(str_mod, dex_mod)
                damage_mod = max(str_mod, dex_mod)
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–ª—É
                attack_mod = str_mod
                damage_mod = str_mod
            
            proficiency_bonus = char.get('proficiency_bonus', 2)
            attack_bonus = attack_mod + proficiency_bonus
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∞—Ç–∞–∫–∏ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è)
            damage_str = str(weapon['damage'])
            damage_type_str = str(weapon['damage_type'])
            info_text += f"‚öîÔ∏è <b>–ê—Ç–∞–∫–∞ ({weapon['name']}):</b> {attack_bonus:+d} –∫ –∞—Ç–∞–∫–µ, {damage_str}{damage_mod:+d} {damage_type_str}\n"
    
    # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π (–∫–∞–∫ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    if char.get('is_spellcaster'):
        spells_query = """
            SELECT s.name, s.level 
            FROM character_spells cs
            JOIN spells s ON cs.spell_id = s.id
            WHERE cs.character_id = %s
            ORDER BY s.level, s.name
        """
        
        spells = db.execute_query(spells_query, (char['id'],))
        
        if spells:
            spells_by_level = {}
            for spell in spells:
                level = spell['level']
                if level not in spells_by_level:
                    spells_by_level[level] = []
                spells_by_level[level].append(spell['name'])
            
            info_text += "\nüìú <b>–ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è:</b>\n"
            for level in sorted(spells_by_level.keys()):
                level_name = "–ó–∞–≥–æ–≤–æ—Ä—ã" if level == 0 else f"{level} —É—Ä–æ–≤–µ–Ω—å"
                spells_list = ", ".join(spells_by_level[level])
                info_text += f"‚Ä¢ <b>{level_name}:</b> {spells_list}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ü–µ (–∫–∞–∫ –≤ –æ–∫–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è)
    info_text += stats_text
    
    return info_text

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /start command"""
    logger.info(f"Start command called by user {update.effective_user.id} in chat {update.effective_chat.id}")
    
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        logger.warning(f"Start command blocked - chat {update.effective_chat.id} not allowed (expected: {ALLOWED_CHAT_ID})")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="This bot is not allowed in this chat.")
        return
        
    await context.bot.send_message(chat_id=update.effective_chat.id, text="Welcome to the D&D adventure bot!")
    logger.info("Start command completed successfully")

async def version_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show bot version and registered commands"""
    logger.info(f"Version command called by user {update.effective_user.id} in chat {update.effective_chat.id}")
    
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    import datetime
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    version_text = f"""ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

üìÖ <b>–í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:</b> {now}
üîÑ <b>–í–µ—Ä—Å–∏—è:</b> 2.0 (—Å –∫–æ–º–∞–Ω–¥–∞–º–∏ /character –∏ /party)

‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /generate - –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
‚Ä¢ /character - –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ‚≠ê –ù–û–í–ê–Ø
‚Ä¢ /party - –ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä—É–ø–ø—É ‚≠ê –ù–û–í–ê–Ø
‚Ä¢ /help - –ü–æ–º–æ—â—å
‚Ä¢ /version - –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞

üîß <b>–°—Ç–∞—Ç—É—Å:</b> –†–∞–±–æ—Ç–∞–µ—Ç"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=version_text, parse_mode='HTML')
    
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for /help command"""
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    help_text = """üé≤ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º D&D –±–æ—Ç–∞</b>

<b>üìä –ü–µ—Ä—Å–æ–Ω–∞–∂–∏:</b>
‚Ä¢ /generate - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ D&D
‚Ä¢ /character - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
‚Ä¢ /deletecharacter - –£–¥–∞–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞

<b>üó∫Ô∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:</b>
‚Ä¢ /startnewadventure - –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ /terminateadventure - –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ
‚Ä¢ /joinadventure - –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—é
‚Ä¢ /leaveadventure - –ü–æ–∫–∏–Ω—É—Ç—å —Ç–µ–∫—É—â–µ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ

<b>üë• –ì—Ä—É–ø–ø–∞:</b>
‚Ä¢ /party - –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–∞–≤ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
‚Ä¢ /action [–¥–µ–π—Å—Ç–≤–∏–µ] - –í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ /version - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞

<b>üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>
- –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫–æ–º–∞–Ω–¥–æ–π /generate –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /party —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫—Ç–æ –≤ –≥—Ä—É–ø–ø–µ
- –í –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /action –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
- –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –±–æ–µ–≤—É—é —Å–∏—Å—Ç–µ–º—É D&D 5e

<i>–£–¥–∞—á–∏ –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö! üåü</i>"""
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text=help_text, parse_mode='HTML')

async def delete_character(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Delete user's character"""
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    user_id = update.effective_user.id
    db = get_db()
    
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # Check if character is in active adventure
    in_adventure = db.execute_query(
        "SELECT ap.id FROM adventure_participants ap "
        "INNER JOIN characters c ON ap.character_id = c.id "
        "INNER JOIN adventures a ON ap.adventure_id = a.id "
        "WHERE c.user_id = %s AND a.status = 'active'",
        (user_id,)
    )
    
    if in_adventure:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Cannot delete character while in an active adventure.")
        return
    
    # Delete character
    result = db.execute_query(
        "UPDATE characters SET is_active = FALSE WHERE user_id = %s AND is_active = TRUE",
        (user_id,)
    )
    
    if result:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="Your character has been deleted.")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="No active character found to delete.")

async def join_adventure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Join an active adventure"""
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    user_id = update.effective_user.id
    db = get_db()
    
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # Check if user has a character
    character = db.execute_query(
        "SELECT id FROM characters WHERE user_id = %s AND is_active = TRUE",
        (user_id,)
    )
    
    if not character:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="You need to generate a character first.")
        return
    
    # Check if there's an active adventure
    adventure = db.execute_query(
        "SELECT id FROM adventures WHERE chat_id = %s AND status = 'active'",
        (update.effective_chat.id,)
    )
    
    if not adventure:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="No active adventure to join.")
        return
    
    # Check if already in adventure
    already_in = db.execute_query(
        "SELECT id FROM adventure_participants WHERE adventure_id = %s AND character_id = %s",
        (adventure[0]['id'], character[0]['id'])
    )
    
    if already_in:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="You are already in this adventure.")
        return
    
    # Join adventure
    db.execute_query(
        "INSERT INTO adventure_participants (adventure_id, character_id) VALUES (%s, %s)",
        (adventure[0]['id'], character[0]['id'])
    )
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text="You have joined the adventure!")

async def leave_adventure(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Leave current adventure"""
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    user_id = update.effective_user.id
    db = get_db()
    
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # Find user's character in active adventure
    participation = db.execute_query(
        "SELECT ap.id FROM adventure_participants ap "
        "INNER JOIN characters c ON ap.character_id = c.id "
        "INNER JOIN adventures a ON ap.adventure_id = a.id "
        "WHERE c.user_id = %s AND a.status = 'active' AND a.chat_id = %s",
        (user_id, update.effective_chat.id)
    )
    
    if not participation:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="You are not in an active adventure.")
        return
    
    # Remove from adventure
    db.execute_query(
        "DELETE FROM adventure_participants WHERE id = %s",
        (participation[0]['id'],)
    )
    
    await context.bot.send_message(chat_id=update.effective_chat.id, text="You have left the adventure.")

async def show_character(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show current character information"""
    logger.info(f"Character command called by user {update.effective_user.id} in chat {update.effective_chat.id}")
    
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        logger.warning(f"Character command blocked - chat {update.effective_chat.id} not allowed (expected: {ALLOWED_CHAT_ID})")
        await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    
    user_id = update.effective_user.id
    logger.info(f"Processing character command for user {user_id}")
    db = get_db()
    
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # Get character data
    character_query = """
        SELECT c.*, r.name as race_name, o.name as origin_name, cl.name as class_name,
               cl.hit_die, cl.is_spellcaster, l.proficiency_bonus
        FROM characters c
        LEFT JOIN races r ON c.race_id = r.id
        LEFT JOIN origins o ON c.origin_id = o.id
        LEFT JOIN classes cl ON c.class_id = cl.id
        LEFT JOIN levels l ON c.level = l.level
        WHERE c.user_id = %s AND c.is_active = TRUE
    """
    
    character = db.execute_query(character_query, (user_id,))
    
    if not character:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return
    
    char = character[0]
    
    # Format character information
    char_info = format_character_display(char, db)
    
    await update.message.reply_text(char_info, parse_mode='HTML')

async def show_party(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show current party members"""
    if update.effective_chat.id != ALLOWED_CHAT_ID:
        return
    
    db = get_db()
    
    if not db.connection or not db.connection.is_connected():
        db.connect()
    
    # Find active adventure in this chat
    adventure = db.execute_query(
        "SELECT id FROM adventures WHERE chat_id = %s AND status = 'active'",
        (update.effective_chat.id,)
    )
    
    if not adventure:
        await update.message.reply_text("‚ùå –í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.")
        return
    
    # Get party members
    party_query = """
        SELECT c.name, c.level, c.experience, c.user_id, cl.name as class_name
        FROM adventure_participants ap
        INNER JOIN characters c ON ap.character_id = c.id
        INNER JOIN classes cl ON c.class_id = cl.id
        WHERE ap.adventure_id = %s
        ORDER BY c.name
    """
    
    party_members = db.execute_query(party_query, (adventure[0]['id'],))
    
    if not party_members:
        await update.message.reply_text("üë• –í –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        return
    
    party_text = "üë• <b>–°–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø—ã:</b>\n\n"
    
    for i, member in enumerate(party_members, 1):
        # Get user info from Telegram
        try:
            user = await context.bot.get_chat_member(update.effective_chat.id, member['user_id'])
            username = user.user.username or user.user.first_name or "Unknown"
        except:
            username = "Unknown"
        
        party_text += f"{i}. <b>{member['name']}</b>\n"
        party_text += f"   üë§ –ò–≥—Ä–æ–∫: @{username}\n"
        party_text += f"   ‚öîÔ∏è –ö–ª–∞—Å—Å: {member['class_name']}\n"
        party_text += f"   üìä –£—Ä–æ–≤–µ–Ω—å: {member['level']}\n"
        party_text += f"   ‚≠ê –û–ø—ã—Ç: {member['experience']}\n\n"
    
    await update.message.reply_text(party_text, parse_mode='HTML')

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for errors"""
    logger.error(f"Update {update} caused error {context.error}")
    
    # Try to respond to the user if possible
    try:
        if update.message:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        elif update.callback_query:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to send error message to user: {e}")

async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handler for unknown commands"""
    if update.message:
        await update.message.reply_text("Sorry, I didn't understand that command.")

# Main function to start the bot
async def main() -> None:
    # Create the Application
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    
    # Register handlers for commands
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("version", version_command))
    application.add_handler(CommandHandler("generate", character_gen.start_character_generation))
    application.add_handler(CommandHandler("character", show_character))
    application.add_handler(CommandHandler("party", show_party))
    application.add_handler(CommandHandler("startnewadventure", adventure_manager.start_new_adventure))
    application.add_handler(CommandHandler("terminateadventure", adventure_manager.terminate_adventure))
    application.add_handler(CommandHandler("deletecharacter", delete_character))
    application.add_handler(CommandHandler("joinadventure", join_adventure))
    application.add_handler(CommandHandler("leaveadventure", leave_adventure))
    application.add_handler(CommandHandler("action", action_handler.handle_action_command))
    
    # Add callback query handler
    application.add_handler(CallbackQueryHandler(handle_callback_query))
    
    # Add message handler for character name input
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, character_gen.handle_name_input))
    
    # Register error handler
    application.add_error_handler(error_handler)

    # Start the bot
    logger.info("Starting the bot...")
    await application.run_polling()

def run_bot():
    """Run the bot using a more compatible approach"""
    import asyncio
    import sys
    import platform
    
    try:
        # Try the standard approach first
        asyncio.run(main())
    except RuntimeError as e:
        error_msg = str(e).lower()
        if ("cannot be called from a running event loop" in error_msg or 
            "this event loop is already running" in error_msg):
            
            logger.info("Detected running event loop, using alternative startup method...")
            
            # Alternative approach for environments with existing event loops
            try:
                # On Windows with Python < 3.8, we need to handle things differently
                if platform.system() == 'Windows' and hasattr(asyncio, 'WindowsProactorEventLoopPolicy'):
                    asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
                
                # Create a completely new event loop
                new_loop = asyncio.new_event_loop()
                asyncio.set_event_loop(new_loop)
                
                try:
                    new_loop.run_until_complete(main())
                except KeyboardInterrupt:
                    logger.info("Bot stopped by user")
                finally:
                    # Don't close the loop, just let it be
                    pass
                    
            except Exception as fallback_error:
                logger.error(f"Failed to start bot with fallback method: {fallback_error}")
                # Try one more approach with threading
                try:
                    import threading
                    import time
                    
                    def run_in_thread():
                        thread_loop = asyncio.new_event_loop()
                        asyncio.set_event_loop(thread_loop)
                        thread_loop.run_until_complete(main())
                    
                    thread = threading.Thread(target=run_in_thread)
                    thread.daemon = True
                    thread.start()
                    
                    # Keep the main thread alive
                    try:
                        while thread.is_alive():
                            time.sleep(1)
                    except KeyboardInterrupt:
                        logger.info("Bot stopped by user")
                        
                except Exception as thread_error:
                    logger.error(f"All startup methods failed: {thread_error}")
                    sys.exit(1)
        else:
            logger.error(f"Failed to start bot: {e}")
            sys.exit(1)
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error(f"Unexpected error starting bot: {e}")
        sys.exit(1)

if __name__ == "__main__":
    run_bot()


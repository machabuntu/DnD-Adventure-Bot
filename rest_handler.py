#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –æ—Ç–¥—ã—Ö–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
"""

import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db
from spell_slot_manager import spell_slot_manager

logger = logging.getLogger(__name__)

class RestHandler:
    def __init__(self):
        self.db = get_db()
        self.rest_votes = {}  # {adventure_id: {user_id: bool}}
        self.rest_message_ids = {}  # {adventure_id: message_id}
        
    async def handle_rest_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ—Ç–¥—ã—Ö"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏
        adventure_info = self.db.execute_query("""
            SELECT a.id, a.status, c.id as character_id, c.name
            FROM adventures a
            JOIN adventure_participants ap ON a.id = ap.adventure_id
            JOIN characters c ON ap.character_id = c.id
            WHERE c.user_id = %s AND a.chat_id = %s AND a.status = 'active'
        """, (user_id, chat_id))
        
        if not adventure_info:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏ –∏–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—è.")
            return
        
        adventure_id = adventure_info[0]['id']
        character_name = adventure_info[0]['name']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏–¥–µ—Ç –ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Ç–¥—ã—Ö
        if adventure_id in self.rest_votes:
            await update.message.reply_text("‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Ç–¥—ã—Ö —É–∂–µ –∏–¥–µ—Ç!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        participants = self.db.execute_query("""
            SELECT c.user_id, c.name
            FROM adventure_participants ap
            JOIN characters c ON ap.character_id = c.id
            WHERE ap.adventure_id = %s
        """, (adventure_id,))
        
        if len(participants) < 2:
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –æ–¥–∏–Ω, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ—Ç–¥—ã—Ö
            await self.initiate_rest(update, context, adventure_id)
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        self.rest_votes[adventure_id] = {user_id: True}  # –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–æ–ª–æ—Å—É–µ—Ç "–∑–∞"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞ –æ—Ç–¥—ã—Ö (1)", callback_data=f"rest_vote_yes_{adventure_id}")],
            [InlineKeyboardButton("‚ùå –ü—Ä–æ—Ç–∏–≤ –æ—Ç–¥—ã—Ö–∞ (0)", callback_data=f"rest_vote_no_{adventure_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        participants_text = "\n".join([f"‚Ä¢ {p['name']}" for p in participants])
        total_needed = len(participants) // 2 + (1 if len(participants) % 2 == 1 else 0)
        
        vote_text = f"""
üèïÔ∏è **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Ç–¥—ã—Ö**

{character_name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–∏–≤–∞–ª –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.

üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è:**
{participants_text}

üìä –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º **{total_needed}** –≥–æ–ª–æ—Å–æ–≤ –∏–∑ **{len(participants)}**

‚è±Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è 30 —Å–µ–∫—É–Ω–¥.
        """
        
        message = await update.message.reply_text(
            vote_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        self.rest_message_ids[adventure_id] = message.message_id
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(30)
        await self.finalize_rest_vote(update, context, adventure_id)
    
    async def handle_rest_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –æ—Ç–¥—ã—Ö"""
        query = update.callback_query
        data = query.data
        user_id = update.effective_user.id
        
        # –ü–∞—Ä—Å–∏–º callback data
        parts = data.split('_')
        vote_type = parts[2]  # yes –∏–ª–∏ no
        adventure_id = int(parts[3])
        
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if adventure_id not in self.rest_votes:
            await query.answer("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        participant = self.db.execute_query("""
            SELECT c.id, c.name
            FROM adventure_participants ap
            JOIN characters c ON ap.character_id = c.id
            WHERE ap.adventure_id = %s AND c.user_id = %s
        """, (adventure_id, user_id))
        
        if not participant:
            await query.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏")
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
        self.rest_votes[adventure_id][user_id] = (vote_type == "yes")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤
        await self.update_vote_display(query, adventure_id)
        await query.answer(f"–í–∞—à –≥–æ–ª–æ—Å {'–∑–∞' if vote_type == 'yes' else '–ø—Ä–æ—Ç–∏–≤'} –æ—Ç–¥—ã—Ö —É—á—Ç–µ–Ω!")
        
    async def update_vote_display(self, query, adventure_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        if adventure_id not in self.rest_votes:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = self.db.execute_query("""
            SELECT c.user_id, c.name
            FROM adventure_participants ap
            JOIN characters c ON ap.character_id = c.id
            WHERE ap.adventure_id = %s
        """, (adventure_id,))
        
        votes = self.rest_votes[adventure_id]
        yes_votes = sum(1 for v in votes.values() if v)
        no_votes = sum(1 for v in votes.values() if not v)
        total_needed = len(participants) // 2 + (1 if len(participants) % 2 == 1 else 0)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—Ç–æ –∫–∞–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª
        vote_status = []
        for p in participants:
            if p['user_id'] in votes:
                vote_emoji = "‚úÖ" if votes[p['user_id']] else "‚ùå"
                vote_status.append(f"{vote_emoji} {p['name']}")
            else:
                vote_status.append(f"‚è≥ {p['name']}")
        
        vote_status_text = "\n".join(vote_status)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton(f"‚úÖ –ó–∞ –æ—Ç–¥—ã—Ö ({yes_votes})", callback_data=f"rest_vote_yes_{adventure_id}")],
            [InlineKeyboardButton(f"‚ùå –ü—Ä–æ—Ç–∏–≤ –æ—Ç–¥—ã—Ö–∞ ({no_votes})", callback_data=f"rest_vote_no_{adventure_id}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        vote_text = f"""
üèïÔ∏è **–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –æ—Ç–¥—ã—Ö**

üìä –î–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º **{total_needed}** –≥–æ–ª–æ—Å–æ–≤ –∏–∑ **{len(participants)}**

**–°—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:**
{vote_status_text}

‚è±Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ...
        """
        
        try:
            await query.edit_message_text(
                vote_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        except:
            pass  # Ignore if message wasn't modified
    
    async def finalize_rest_vote(self, update: Update, context: ContextTypes.DEFAULT_TYPE, adventure_id: int):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ"""
        if adventure_id not in self.rest_votes:
            return
        
        votes = self.rest_votes[adventure_id]
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = self.db.execute_query("""
            SELECT c.user_id, c.name
            FROM adventure_participants ap
            JOIN characters c ON ap.character_id = c.id
            WHERE ap.adventure_id = %s
        """, (adventure_id,))
        
        yes_votes = sum(1 for v in votes.values() if v)
        total_needed = len(participants) // 2 + (1 if len(participants) % 2 == 1 else 0)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º
        if adventure_id in self.rest_message_ids:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=self.rest_message_ids[adventure_id]
                )
            except:
                pass
            del self.rest_message_ids[adventure_id]
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        del self.rest_votes[adventure_id]
        
        if yes_votes >= total_needed:
            # –û—Ç–¥—ã—Ö –ø—Ä–∏–Ω—è—Ç
            await self.initiate_rest(update, context, adventure_id)
        else:
            # –û—Ç–¥—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞ –æ—Ç–¥—ã—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–æ {yes_votes} –∏–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö {total_needed}. –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!"
            )
    
    async def initiate_rest(self, update: Update, context: ContextTypes.DEFAULT_TYPE, adventure_id: int):
        """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –æ—Ç–¥—ã—Ö –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã"""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –≤ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–∏
        characters = self.db.execute_query("""
            SELECT c.id, c.name, c.current_hp, c.max_hp, cl.is_spellcaster
            FROM adventure_participants ap
            JOIN characters c ON ap.character_id = c.id
            JOIN classes cl ON c.class_id = cl.id
            WHERE ap.adventure_id = %s
        """, (adventure_id,))
        
        rest_text = "üèïÔ∏è **–ì—Ä—É–ø–ø–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–¥—ã—Ö (8 —á–∞—Å–æ–≤)**\n\n"
        
        for char in characters:
            # –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP
            self.db.execute_query(
                "UPDATE characters SET current_hp = max_hp WHERE id = %s",
                (char['id'],)
            )
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π
            if char['is_spellcaster']:
                spell_slot_manager.rest_long(char['id'])
            
            rest_text += f"‚Ä¢ **{char['name']}**: ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ({char['max_hp']}/{char['max_hp']})\n"
            if char['is_spellcaster']:
                rest_text += f"  üîÆ –°–ª–æ—Ç—ã –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n"
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=rest_text,
            parse_mode='Markdown'
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–∞–ª–µ –≤ Grok API –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
        from action_handler import action_handler
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º "–¥–µ–π—Å—Ç–≤–∏–µ" –æ—Ç–¥—ã—Ö–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Grok
        rest_action = {
            'character_name': '–í—Å—è –≥—Ä—É–ø–ø–∞',
            'action': '—É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–≤–∞–ª –∏ –æ—Ç–¥—ã—Ö–∞–µ—Ç 8 —á–∞—Å–æ–≤, –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–∏–ª—ã'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –∫–∞–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
        if adventure_id not in action_handler.pending_actions:
            action_handler.pending_actions[adventure_id] = {}
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–¥—ã—Ö
        action_handler.pending_actions[adventure_id] = {0: rest_action}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
        await action_handler.process_actions(update, context, adventure_id)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
rest_handler = RestHandler()

#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –≤ –±–æ—é, –ø—Ä–æ–≤–µ—Ä–∫—É —Å–ª–æ—Ç–æ–≤, –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π –∏ –Ω–∞–Ω–µ—Å–µ–Ω–∏–µ —É—Ä–æ–Ω–∞.
"""

import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db
from dice_utils import roll_dice, roll_dice_detailed, is_critical_hit, is_critical_miss
from spell_slot_manager import spell_slot_manager
from achievement_manager import achievement_manager
from combat_achievements import record_damage_dealt, record_kill

logger = logging.getLogger(__name__)

class SpellCombatManager:
    def __init__(self):
        self.db = get_db()
    
    async def display_combat_spells(self, update: Update, character_id: int, adventure_id: int, turn_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = spell_slot_manager.get_available_slots(character_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å —É—á–µ—Ç–æ–º —Å–ª–æ—Ç–æ–≤
        combat_spells_query = """
            SELECT s.id, s.name, s.level, s.damage, s.damage_type, s.description, s.is_area_of_effect
            FROM character_spells cs
            JOIN spells s ON cs.spell_id = s.id
            WHERE cs.character_id = %s AND s.is_combat = TRUE
            ORDER BY s.level, s.name
        """
        
        combat_spells = self.db.execute_query(combat_spells_query, (character_id,))
        
        if not combat_spells:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π!"
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —Å–ª–æ—Ç—ã
        available_spells = []
        for spell in combat_spells:
            if spell_slot_manager.has_available_slot(character_id, spell['level']):
                available_spells.append(spell)
        
        if not available_spells:
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            await update.callback_query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π!\n\n{slot_info}"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        spells_by_level = {}
        for spell in available_spells:
            level = spell['level']
            if level not in spells_by_level:
                spells_by_level[level] = []
            spells_by_level[level].append(spell)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        keyboard = []
        
        # –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥–æ–≤–æ—Ä—ã (0 —É—Ä–æ–≤–µ–Ω—å)
        if 0 in spells_by_level:
            for spell in spells_by_level[0]:
                spell_name = spell['name']
                damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                aoe_mark = " [AoE]" if spell['is_area_of_effect'] else ""
                
                button_text = f"üîÆ {spell_name}{damage_info}{aoe_mark}"
                callback_data = f"cast_{character_id}_{adventure_id}_{turn_index}_{spell['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ó–∞—Ç–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        for level in range(1, 10):
            if level in spells_by_level:
                for spell in spells_by_level[level]:
                    spell_name = spell['name']
                    damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                    aoe_mark = " [AoE]" if spell['is_area_of_effect'] else ""
                    
                    button_text = f"‚ú®{level} {spell_name}{damage_info}{aoe_mark}"
                    callback_data = f"cast_{character_id}_{adventure_id}_{turn_index}_{spell['id']}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                             callback_data=f"cancel_spell_{character_id}_{adventure_id}_{turn_index}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if not keyboard or len(keyboard) == 1:  # –¢–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            await update.callback_query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π!\n\n{slot_info}"
            )
        else:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            spell_text = f"ü™Ñ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n{slot_info}"
            
            await update.callback_query.edit_message_text(spell_text, reply_markup=reply_markup)
    
    async def handle_spell_cast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               character_id: int, adventure_id: int, turn_index: int, spell_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_query = """
            SELECT s.name, s.level, s.damage, s.damage_type, s.description, s.is_area_of_effect
            FROM spells s
            WHERE s.id = %s
        """
        
        spell_info = self.db.execute_query(spell_query, (spell_id,))
        if not spell_info:
            await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        spell = spell_info[0]
        spell_name = spell['name']
        spell_level = spell['level']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
        char_spell_query = "SELECT id FROM character_spells WHERE character_id = %s AND spell_id = %s"
        has_spell = self.db.execute_query(char_spell_query, (character_id, spell_id))
        
        if not has_spell:
            await update.callback_query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell_name}'!"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        if not spell_slot_manager.has_available_slot(character_id, spell_level):
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell_name}' (—É—Ä–æ–≤–µ–Ω—å {spell_level})!\n\n{slot_info}"
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ—Ç
        used_slot_level = spell_slot_manager.use_spell_slot(character_id, spell_level)
        if used_slot_level is None:
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ—Ç –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell_name}'!"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char_query = "SELECT name FROM characters WHERE id = %s"
        char_result = self.db.execute_query(char_query, (character_id,))
        char_name = char_result[0]['name'] if char_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –ï—Å–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        if spell['damage']:
            if spell['is_area_of_effect']:
                # AoE –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ - –∞—Ç–∞–∫—É–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤
                await self.cast_aoe_spell(update, character_id, adventure_id, spell, char_name, context, turn_index)
            else:
                # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ - –≤—ã–±–∏—Ä–∞–µ–º —Ü–µ–ª—å
                await self.display_spell_targets(update, character_id, adventure_id, turn_index, spell, char_name)
        else:
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏
            await self.cast_utility_spell(update, character_id, adventure_id, spell, char_name, context, turn_index)
    
    async def display_spell_targets(self, update: Update, character_id: int, adventure_id: int, 
                                   turn_index: int, spell: dict, char_name: str):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.hit_points, e.max_hit_points
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.hit_points > 0
        """
        
        alive_enemies = self.db.execute_query(enemies_query, (adventure_id,))
        
        if not alive_enemies:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        spell_id_query = "SELECT id FROM spells WHERE name = %s AND level = %s"
        spell_id_result = self.db.execute_query(spell_id_query, (spell['name'], spell['level']))
        spell_id = spell_id_result[0]['id'] if spell_id_result else 0
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
        keyboard = []
        for enemy in alive_enemies:
            enemy_name = enemy['name']
            callback_data = f"spell_target_{character_id}_{adventure_id}_{turn_index}_{spell_id}_{enemy['id']}"
            keyboard.append([InlineKeyboardButton(enemy_name, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        spell_name = spell['name']
        damage_info = f" ({spell['damage']} {spell['damage_type']})" if spell['damage_type'] else f" ({spell['damage']})"
        
        await update.callback_query.edit_message_text(
            f"üéØ {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}'{damage_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:",
            reply_markup=reply_markup
        )
    
    async def cast_single_target_spell(self, update: Update, character_id: int, adventure_id: int,
                                      spell_id: int, target_id: int):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–µ –±–æ–µ–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫ —Ü–µ–ª–∏."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_query = """
            SELECT name, level, damage, damage_type, description
            FROM spells WHERE id = %s
        """
        
        spell_info = self.db.execute_query(spell_query, (spell_id,))
        if not spell_info:
            await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        spell = spell_info[0]
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        char_query = "SELECT name FROM characters WHERE id = %s"
        char_result = self.db.execute_query(char_query, (character_id,))
        char_name = char_result[0]['name'] if char_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–∏
        target_query = "SELECT name, hit_points, armor_class FROM enemies WHERE id = %s"
        target_result = self.db.execute_query(target_query, (target_id,))
        
        if not target_result:
            await update.callback_query.edit_message_text("‚ùå –¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return
        
        target = target_result[0]
        target_name = target['name']
        target_ac = target['armor_class'] or 12
        
        spell_name = spell['name']
        result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '{spell_name}' –Ω–∞ {target_name}!\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∑–∞ –ø–µ—Ä–≤–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
        user_query = "SELECT user_id FROM characters WHERE id = %s"
        user_result = self.db.execute_query(user_query, (character_id,))
        user_id = user_result[0]['user_id'] if user_result else None
        if user_id:
            ach = achievement_manager.grant_achievement(user_id, 'first_spell', char_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏ –∏–ª–∏ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
        spell_check_query = "SELECT saving_throw FROM spells WHERE id = %s"
        spell_check = self.db.execute_query(spell_check_query, (spell_id,))
        has_saving_throw = spell_check and spell_check[0]['saving_throw'] is not None
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω - —Ç—Ä–µ–±—É–µ—Ç—Å—è –±—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏
        if spell['damage'] and not has_saving_throw:
            # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è, —Ç—Ä–µ–±—É—é—â–∏–µ –±—Ä–æ—Å–∫–∞ –∞—Ç–∞–∫–∏
            from dice_utils import calculate_modifier
            
            # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–ª–∞—Å—Å–æ–≤
            char_stats_query = """
                SELECT c.intelligence, c.wisdom, c.charisma, cl.spellcasting_ability
                FROM characters c
                JOIN classes cl ON c.class_id = cl.id
                WHERE c.id = %s
            """
            
            char_stats = self.db.execute_query(char_stats_query, (character_id,))
            if not char_stats:
                spell_modifier = 0
            else:
                stats = char_stats[0]
                spellcasting_ability = stats['spellcasting_ability']
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∫–ª–∞—Å—Å–∞
                if spellcasting_ability == "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç":
                    spell_modifier = calculate_modifier(stats['intelligence'])
                elif spellcasting_ability == "–ú—É–¥—Ä–æ—Å—Ç—å":
                    spell_modifier = calculate_modifier(stats['wisdom'])
                elif spellcasting_ability == "–•–∞—Ä–∏–∑–º–∞":
                    spell_modifier = calculate_modifier(stats['charisma'])
                else:
                    # –ï—Å–ª–∏ –∫–ª–∞—Å—Å –Ω–µ –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
                    spell_modifier = 0
            
            proficiency_bonus = 2  # –£–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è 1-5 —É—Ä–æ–≤–Ω—è
            spell_attack_bonus = spell_modifier + proficiency_bonus
            
            from dice_utils import roll_d20
            attack_roll_result, attack_breakdown = roll_d20(spell_attack_bonus)
            raw_roll = attack_roll_result - spell_attack_bonus
            
            result_text += f"üé≤ –ë—Ä–æ—Å–æ–∫ –∞—Ç–∞–∫–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º: {attack_breakdown} –ø—Ä–æ—Ç–∏–≤ AC {target_ac}"
            
            if is_critical_hit(raw_roll):
                result_text += f"\nüéØ –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–û–ü–ê–î–ê–ù–ò–ï! (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 20)"
                damage_result = self._roll_spell_damage(spell['damage'], critical=True)
                result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
                new_hp = max(0, target['hit_points'] - damage_result['total'])
                self.db.execute_query("UPDATE enemies SET hit_points = %s WHERE id = %s",
                                     (new_hp, target_id))
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–Ω–∞
                try:
                    dealt = target['hit_points'] - new_hp
                    if dealt > 0:
                        record_damage_dealt(adventure_id, character_id, dealt)
                except Exception as e:
                    logger.warning(f"COMBAT METRICS WARNING: record_damage_dealt failed: {e}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–Ω
                if user_id:
                    ach_damage = achievement_manager.check_damage_achievement(user_id, damage_result['total'], char_name)
                
                if new_hp <= 0:
                    result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
                    try:
                        record_kill(adventure_id, character_id, 1)
                    except Exception as e:
                        logger.warning(f"COMBAT METRICS WARNING: record_kill failed: {e}")
                
            elif is_critical_miss(raw_roll):
                result_text += f"\nüí® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–ú–ê–•! (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 1)"
                
            elif attack_roll_result >= target_ac:
                result_text += f"\n‚úÖ –ü–û–ü–ê–î–ê–ù–ò–ï!"
                damage_result = self._roll_spell_damage(spell['damage'])
                result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
                new_hp = max(0, target['hit_points'] - damage_result['total'])
                self.db.execute_query("UPDATE enemies SET hit_points = %s WHERE id = %s",
                                     (new_hp, target_id))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∑–∞ —É—Ä–æ–Ω
                if user_id:
                    ach_damage = achievement_manager.check_damage_achievement(user_id, damage_result['total'], char_name)
                
                if new_hp <= 0:
                    result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
            else:
                result_text += f"\n‚ùå –ü–†–û–ú–ê–•!"
        else:
            # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞—é—â–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å—Ç—Ä–µ–ª–∞)
            result_text += f"\n‚ú® –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–∞–¥–∞–µ—Ç!"
            
            if spell['damage']:
                damage_result = self._roll_spell_damage(spell['damage'])
                result_text += f"\nüí• –£—Ä–æ–Ω: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞"
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
                new_hp = max(0, target['hit_points'] - damage_result['total'])
                self.db.execute_query("UPDATE enemies SET hit_points = %s WHERE id = %s",
                                     (new_hp, target_id))
                
                if new_hp <= 0:
                    result_text += f"\nüíÄ {target_name} –ø–æ–≤–µ—Ä–∂–µ–Ω –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ–º!"
        
        await update.callback_query.edit_message_text(result_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∂–∏–≤—ã–µ –≤—Ä–∞–≥–∏
        alive_enemies_query = "SELECT COUNT(*) as count FROM enemies WHERE adventure_id = %s AND hit_points > 0"
        alive_enemies = self.db.execute_query(alive_enemies_query, (adventure_id,))
        
        if alive_enemies and alive_enemies[0]['count'] == 0:
            from combat_manager import combat_manager
            await combat_manager.end_combat(update.callback_query, adventure_id, victory='players')
    
    async def cast_aoe_spell(self, update: Update, character_id: int, adventure_id: int, 
                            spell: dict, char_name: str, context: ContextTypes.DEFAULT_TYPE = None, turn_index: int = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ –æ–±–ª–∞—Å—Ç–∏ (AoE) –∫–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.hit_points, e.max_hit_points, e.armor_class
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.hit_points > 0
        """
        
        alive_enemies = self.db.execute_query(enemies_query, (adventure_id,))
        
        if not alive_enemies:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        spell_name = spell['name']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ø–∞—Å–±—Ä–æ—Å–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        spell_save_query = "SELECT saving_throw FROM spells WHERE name = %s AND level = %s"
        spell_save_result = self.db.execute_query(spell_save_query, (spell_name, spell['level']))
        saving_throw_type = spell_save_result[0]['saving_throw'] if spell_save_result and spell_save_result[0]['saving_throw'] else None
        
        result_text = f"üî• {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}' –ø–æ –æ–±–ª–∞—Å—Ç–∏!\n"
        
        # –î–ª—è AoE –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –¥–µ–ª–∞–µ–º –û–î–ò–ù –±—Ä–æ—Å–æ–∫ —É—Ä–æ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π
        base_damage_result = self._roll_spell_damage(spell['damage'])
        result_text += f"\nüí• –ë–∞–∑–æ–≤—ã–π —É—Ä–æ–Ω: {base_damage_result['text']} {spell['damage_type']}\n"
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫, –≤—ã—á–∏—Å–ª—è–µ–º DC
        save_dc = None
        if saving_throw_type:
            from saving_throws import saving_throw_manager
            save_dc = saving_throw_manager.calculate_spell_save_dc(character_id)
            result_text += f"üìä DC —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ ({saving_throw_type}): {save_dc}\n\n"
        else:
            result_text += "\n"
        
        enemies_defeated = []
        total_dealt = 0
        
        for enemy in alive_enemies:
            enemy_name = enemy['name']
            actual_damage = base_damage_result['total']
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫, –≤—Ä–∞–≥ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É —É—Ä–æ–Ω–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if saving_throw_type:
                from saving_throws import saving_throw_manager
                save_success, save_text = saving_throw_manager.make_saving_throw(
                    enemy['id'], 'enemy', saving_throw_type, save_dc
                )
                
                if save_success:
                    actual_damage = actual_damage // 2  # –ü–æ–ª–æ–≤–∏–Ω–∞ —É—Ä–æ–Ω–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–ø–∞—Å–±—Ä–æ—Å–∫–µ
                    result_text += f"{enemy_name}: {save_text.split(' - ')[1]} - –ø–æ–ª—É—á–∞–µ—Ç {actual_damage} —É—Ä–æ–Ω–∞ (–ø–æ–ª–æ–≤–∏–Ω–∞)\n"
                else:
                    result_text += f"{enemy_name}: {save_text.split(' - ')[1]} - –ø–æ–ª—É—á–∞–µ—Ç {actual_damage} —É—Ä–æ–Ω–∞ (–ø–æ–ª–Ω—ã–π)\n"
            else:
                result_text += f"{enemy_name}: –ø–æ–ª—É—á–∞–µ—Ç {actual_damage} —É—Ä–æ–Ω–∞\n"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, enemy['hit_points'] - actual_damage)
            self.db.execute_query("UPDATE enemies SET hit_points = %s WHERE id = %s",
                                 (new_hp, enemy['id']))
            
            # –°—É–º–º–∞—Ä–Ω—ã–π –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
            dealt = enemy['hit_points'] - new_hp
            if dealt > 0:
                total_dealt += dealt
            
            if new_hp <= 0:
                enemies_defeated.append(enemy_name)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–Ω–µ—Å–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –ø–æ –±–æ–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        try:
            if total_dealt > 0:
                record_damage_dealt(adventure_id, character_id, total_dealt)
        except Exception as e:
            logger.warning(f"COMBAT METRICS WARNING: record_damage_dealt (AoE) failed: {e}")
        
        if enemies_defeated:
            result_text += f"\nüíÄ –ü–æ–≤–µ—Ä–∂–µ–Ω—ã: {', '.join(enemies_defeated)}"
            # –ú—É–ª—å—Ç–∏–∫–∏–ª–ª: –≤—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 3/5
            try:
                user_row = self.db.execute_query("SELECT user_id FROM characters WHERE id = %s", (character_id,))
                user_id = user_row[0]['user_id'] if user_row else None
                if user_id:
                    count = len(enemies_defeated)
                    if count >= 5:
                        achievement_manager.grant_achievement(user_id, 'multikill_5', char_name,
                                                              f"–£–±–∏—Ç—ã: {', '.join(enemies_defeated)}")
                    elif count >= 3:
                        achievement_manager.grant_achievement(user_id, 'multikill_3', char_name,
                                                              f"–£–±–∏—Ç—ã: {', '.join(enemies_defeated)}")
            except Exception as e:
                logger.warning(f"ACHIEVEMENTS WARNING: multikill award failed: {e}")
        
        await update.callback_query.edit_message_text(result_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –∂–∏–≤—ã–µ –≤—Ä–∞–≥–∏
        alive_enemies_query = "SELECT COUNT(*) as count FROM enemies WHERE adventure_id = %s AND hit_points > 0"
        alive_enemies_check = self.db.execute_query(alive_enemies_query, (adventure_id,))
        
        if alive_enemies_check and alive_enemies_check[0]['count'] == 0:
            from combat_manager import combat_manager
            await combat_manager.end_combat(update.callback_query, adventure_id, victory='players')
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AoE –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            if turn_index is not None and context:
                from combat_manager import combat_manager
                await combat_manager.next_turn(update, context, adventure_id, turn_index)
    
    async def cast_utility_spell(self, update: Update, character_id: int, adventure_id: int,
                                spell: dict, char_name: str, context: ContextTypes.DEFAULT_TYPE = None, turn_index: int = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ (–Ω–µ –Ω–∞–Ω–æ—Å—è—â–µ–µ —É—Ä–æ–Ω)."""
        spell_name = spell['name']
        
        # –ë–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –Ω–µ—É—Ä–Ω–æ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '{spell_name}'!\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        if spell['description']:
            result_text += f"\nüìú {spell['description']}"
        
        # –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        if spell_name == "–©–∏—Ç":
            result_text += "\nüõ°Ô∏è +5 –∫ –ö–î –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ö–æ–¥–∞!"
        elif spell_name == "–†–∞–∑–º—ã—Ç–∏–µ":
            result_text += "\nüëª –ê—Ç–∞–∫–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂—É —Å–æ–≤–µ—Ä—à–∞—é—Ç—Å—è —Å –ø–æ–º–µ—Ö–æ–π!"
        elif spell_name == "–ù–µ–≤–∏–¥–∏–º–æ—Å—Ç—å":
            result_text += "\nü´• –ü–µ—Ä—Å–æ–Ω–∞–∂ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–≤–∏–¥–∏–º—ã–º!"
        
        await update.callback_query.edit_message_text(result_text)
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–æ–¥—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        if turn_index is not None and context:
            from combat_manager import combat_manager
            await combat_manager.next_turn(update, context, adventure_id, turn_index)
    
    def _roll_spell_damage(self, damage_dice: str, critical: bool = False) -> dict:
        """–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ —É—Ä–æ–Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        if critical:
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è —É–¥–≤–∞–∏–≤–∞–µ–º –∫—É–±–∏–∫–∏
            total1, rolls1, modifier1, _ = roll_dice_detailed(damage_dice)
            total2, rolls2, modifier2, _ = roll_dice_detailed(damage_dice)
            
            all_rolls = rolls1 + rolls2
            total_damage = sum(all_rolls) + modifier1  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è
            
            if len(all_rolls) == 1:
                if modifier1 != 0:
                    damage_text = f"{all_rolls[0]} + {modifier1} = {total_damage}"
                else:
                    damage_text = f"{all_rolls[0]} = {total_damage}"
            else:
                rolls_str = " + ".join(map(str, all_rolls))
                if modifier1 != 0:
                    damage_text = f"{rolls_str} + {modifier1} = {total_damage}"
                else:
                    damage_text = f"{rolls_str} = {total_damage}"
        else:
            # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
            total_damage, damage_text = roll_dice(damage_dice)
        
        return {
            'total': total_damage,
            'text': damage_text
        }

# Global instance
spell_combat_manager = SpellCombatManager()

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞–º–∏ –≤ D&D.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤.
"""

import json
import logging
from typing import Optional, Tuple, Dict
from database import get_db
from dice_utils import roll_d20, calculate_modifier

logger = logging.getLogger(__name__)

class SavingThrowManager:
    def __init__(self):
        self.db = get_db()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–∞ –ø–æ–ª—è –≤ –ë–î
        self.stat_mapping = {
            '–°–∏–ª–∞': 'strength',
            '–õ–æ–≤–∫–æ—Å—Ç—å': 'dexterity',
            '–¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ': 'constitution',
            '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç': 'intelligence',
            '–ú—É–¥—Ä–æ—Å—Ç—å': 'wisdom',
            '–•–∞—Ä–∏–∑–º–∞': 'charisma'
        }
    
    def calculate_spell_save_dc(self, caster_id: int) -> int:
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ –æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
        
        –§–æ—Ä–º—É–ª–∞: 8 + –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å–Ω–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        """
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –µ–≥–æ –∫–ª–∞—Å—Å–µ
        query = """
            SELECT c.level, c.intelligence, c.wisdom, c.charisma,
                   cl.primary_stat, cl.name as class_name
            FROM characters c
            JOIN classes cl ON c.class_id = cl.id
            WHERE c.id = %s
        """
        
        result = self.db.execute_query(query, (caster_id,))
        
        if not result:
            logger.error(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {caster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return 13  # –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        char_data = result[0]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—å–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        spell_stat = None
        class_name = char_data['class_name']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è –ø–æ –∫–ª–∞—Å—Å—É
        if class_name == '–í–æ–ª—à–µ–±–Ω–∏–∫':
            spell_stat = char_data['intelligence']
        elif class_name in ['–ñ—Ä–µ—Ü', '–î—Ä—É–∏–¥', '–°–ª–µ–¥–æ–ø—ã—Ç', '–ú–æ–Ω–∞—Ö']:
            spell_stat = char_data['wisdom']
        elif class_name in ['–ë–∞—Ä–¥', '–ß–∞—Ä–æ–¥–µ–π', '–ö–æ–ª–¥—É–Ω', '–ü–∞–ª–∞–¥–∏–Ω']:
            spell_stat = char_data['charisma']
        else:
            # –î–ª—è –Ω–µ-–∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –∫–ª–∞—Å—Å–∞
            primary_stat = char_data.get('primary_stat', '').lower()
            if primary_stat in ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma']:
                spell_stat = char_data.get(primary_stat, 10)
            else:
                spell_stat = 10  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        spell_modifier = calculate_modifier(spell_stat or 10)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞
        proficiency_bonus = 2 + (char_data['level'] - 1) // 4
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ = 8 + –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ + –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        save_dc = 8 + proficiency_bonus + spell_modifier
        
        logger.info(f"–ü–µ—Ä—Å–æ–Ω–∞–∂ {caster_id} ({class_name}): DC —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ = {save_dc} "
                   f"(8 + {proficiency_bonus} –ø—Ä–æ—Ñ. + {spell_modifier} –º–æ–¥.)")
        
        return save_dc
    
    def make_saving_throw(self, target_id: int, target_type: str, 
                         save_type: str, dc: int, 
                         advantage: bool = False, disadvantage: bool = False) -> Tuple[bool, str]:
        """
        –°–æ–≤–µ—Ä—à–∞–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ –¥–ª—è —Ü–µ–ª–∏.
        
        Args:
            target_id: ID —Ü–µ–ª–∏
            target_type: –¢–∏–ø —Ü–µ–ª–∏ ('character' –∏–ª–∏ 'enemy')
            save_type: –¢–∏–ø —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞ (–°–∏–ª–∞, –õ–æ–≤–∫–æ—Å—Ç—å, –¢–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ, –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç, –ú—É–¥—Ä–æ—Å—Ç—å, –•–∞—Ä–∏–∑–º–∞)
            dc: –°–ª–æ–∂–Ω–æ—Å—Ç—å —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
            advantage: –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –±—Ä–æ—Å–æ–∫
            disadvantage: –ü–æ–º–µ—Ö–∞ –Ω–∞ –±—Ä–æ—Å–æ–∫
            
        Returns:
            (—É—Å–ø–µ—Ö, —Ç–µ–∫—Å—Ç_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        """
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ü–µ–ª–∏
        if target_type == 'character':
            stats = self._get_character_stats(target_id)
            proficiency_bonus = self._get_character_proficiency(target_id, save_type)
        else:  # enemy
            stats = self._get_enemy_stats(target_id)
            proficiency_bonus = 0  # –í—Ä–∞–≥–∏ –ø–æ–∫–∞ –Ω–µ –∏–º–µ—é—Ç –≤–ª–∞–¥–µ–Ω–∏—è —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞–º–∏
        
        if not stats:
            logger.error(f"–¶–µ–ª—å {target_type} {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False, "–¶–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
        stat_field = self.stat_mapping.get(save_type, 'constitution')
        stat_value = stats.get(stat_field, 10)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        stat_modifier = calculate_modifier(stat_value)
        total_modifier = stat_modifier + proficiency_bonus
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º –±—Ä–æ—Å–æ–∫
        if advantage and not disadvantage:
            # –ë—Ä–æ—Å–∞–µ–º –¥–≤–∞–∂–¥—ã, –±–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            roll1, _ = roll_d20(total_modifier)
            roll2, _ = roll_d20(total_modifier)
            roll_result = max(roll1, roll2)
            raw_roll = roll_result - total_modifier
            breakdown = f"d20({raw_roll} —Å –ø—Ä–µ–∏–º.) + {total_modifier}"
        elif disadvantage and not advantage:
            # –ë—Ä–æ—Å–∞–µ–º –¥–≤–∞–∂–¥—ã, –±–µ—Ä–µ–º —Ö—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            roll1, _ = roll_d20(total_modifier)
            roll2, _ = roll_d20(total_modifier)
            roll_result = min(roll1, roll2)
            raw_roll = roll_result - total_modifier
            breakdown = f"d20({raw_roll} —Å –ø–æ–º.) + {total_modifier}"
        else:
            # –û–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫
            roll_result, breakdown = roll_d20(total_modifier)
            raw_roll = roll_result - total_modifier
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        success = roll_result >= dc
        
        # –ù–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 20 - –≤—Å–µ–≥–¥–∞ —É—Å–ø–µ—Ö, –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–∞—è 1 - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–∞–ª
        if raw_roll == 20:
            success = True
            result_text = f"üé≤ –°–ø–∞—Å–±—Ä–æ—Å–æ–∫ {save_type}: {breakdown} = {roll_result} vs DC {dc} - ‚ú® –ö–†–ò–¢. –£–°–ü–ï–•!"
        elif raw_roll == 1:
            success = False
            result_text = f"üé≤ –°–ø–∞—Å–±—Ä–æ—Å–æ–∫ {save_type}: {breakdown} = {roll_result} vs DC {dc} - üíÄ –ö–†–ò–¢. –ü–†–û–í–ê–õ!"
        else:
            if success:
                result_text = f"üé≤ –°–ø–∞—Å–±—Ä–æ—Å–æ–∫ {save_type}: {breakdown} = {roll_result} vs DC {dc} - ‚úÖ –£–°–ü–ï–•"
            else:
                result_text = f"üé≤ –°–ø–∞—Å–±—Ä–æ—Å–æ–∫ {save_type}: {breakdown} = {roll_result} vs DC {dc} - ‚ùå –ü–†–û–í–ê–õ"
        
        logger.info(f"{target_type} {target_id}: {result_text}")
        
        return success, result_text
    
    def _get_character_stats(self, character_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        query = """
            SELECT name, strength, dexterity, constitution, 
                   intelligence, wisdom, charisma
            FROM characters
            WHERE id = %s
        """
        
        result = self.db.execute_query(query, (character_id,))
        return result[0] if result else None
    
    def _get_enemy_stats(self, enemy_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—Ä–∞–≥–∞."""
        query = """
            SELECT name, strength, dexterity, constitution,
                   intelligence, wisdom, charisma
            FROM enemies
            WHERE id = %s
        """
        
        result = self.db.execute_query(query, (enemy_id,))
        if result:
            enemy = result[0]
            # –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return {
                'name': enemy.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'),
                'strength': enemy.get('strength', 10),
                'dexterity': enemy.get('dexterity', 10),
                'constitution': enemy.get('constitution', 10),
                'intelligence': enemy.get('intelligence', 10),
                'wisdom': enemy.get('wisdom', 10),
                'charisma': enemy.get('charisma', 10)
            }
        return None
    
    def _get_character_proficiency(self, character_id: int, save_type: str) -> int:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–ª–∞–¥–µ–µ—Ç –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –¥–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–æ–Ω—É—Å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ –µ—Å–ª–∏ –≤–ª–∞–¥–µ–µ—Ç, –∏–Ω–∞—á–µ 0.
        """
        query = """
            SELECT c.level, cl.saving_throw_proficiencies
            FROM characters c
            JOIN classes cl ON c.class_id = cl.id
            WHERE c.id = %s
        """
        
        result = self.db.execute_query(query, (character_id,))
        
        if not result:
            return 0
        
        char_data = result[0]
        proficiencies_json = char_data.get('saving_throw_proficiencies')
        
        if not proficiencies_json:
            return 0
        
        try:
            proficiencies = json.loads(proficiencies_json)
            if save_type in proficiencies:
                # –ü–µ—Ä—Å–æ–Ω–∞–∂ –≤–ª–∞–¥–µ–µ—Ç —ç—Ç–∏–º —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–º
                proficiency_bonus = 2 + (char_data['level'] - 1) // 4
                return proficiency_bonus
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character_id}")
        
        return 0
    
    def process_spell_saving_throw(self, spell_id: int, caster_id: int, 
                                  target_id: int, target_type: str = 'enemy') -> Tuple[bool, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ –æ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.
        
        Returns:
            (—É—Å–ø–µ—Ö_—Å–ø–∞—Å–±—Ä–æ—Å–∫–∞, —Ç–µ–∫—Å—Ç_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
        """
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_query = """
            SELECT name, saving_throw
            FROM spells
            WHERE id = %s
        """
        
        spell_result = self.db.execute_query(spell_query, (spell_id,))
        
        if not spell_result:
            logger.error(f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ {spell_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return False, "–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        spell = spell_result[0]
        save_type = spell.get('saving_throw')
        
        if not save_type:
            logger.warning(f"–ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ {spell['name']} –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞")
            return False, ""
        
        # –í—ã—á–∏—Å–ª—è–µ–º DC —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
        dc = self.calculate_spell_save_dc(caster_id)
        
        # –°–æ–≤–µ—Ä—à–∞–µ–º —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫
        success, result_text = self.make_saving_throw(
            target_id, target_type, save_type, dc
        )
        
        return success, result_text
    
    def process_aoe_saving_throws(self, spell_id: int, caster_id: int, 
                                 targets: list) -> Dict[int, Tuple[bool, str]]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∏ –¥–ª—è AoE –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è.
        
        Args:
            spell_id: ID –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
            caster_id: ID –∑–∞–∫–ª–∏–Ω–∞—Ç–µ–ª—è
            targets: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ü–µ–ª—è—Ö
                    [{'id': enemy_id, 'type': 'enemy'}, ...]
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å {target_id: (—É—Å–ø–µ—Ö, —Ç–µ–∫—Å—Ç_—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)}
        """
        results = {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º DC –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π
        dc = self.calculate_spell_save_dc(caster_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
        spell_query = "SELECT saving_throw FROM spells WHERE id = %s"
        spell_result = self.db.execute_query(spell_query, (spell_id,))
        
        if not spell_result or not spell_result[0].get('saving_throw'):
            # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
            for target in targets:
                results[target['id']] = (False, "")
            return results
        
        save_type = spell_result[0]['saving_throw']
        
        # –ö–∞–∂–¥–∞—è —Ü–µ–ª—å –¥–µ–ª–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫
        for target in targets:
            success, result_text = self.make_saving_throw(
                target['id'], target.get('type', 'enemy'), save_type, dc
            )
            results[target['id']] = (success, result_text)
        
        return results

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–ø–∞—Å–±—Ä–æ—Å–∫–æ–≤
saving_throw_manager = SavingThrowManager()

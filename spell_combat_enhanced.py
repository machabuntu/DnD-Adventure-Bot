#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è–º–∏ –≤ –±–æ–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.
–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–æ —É—Ä–æ–≤–Ω—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ —Å–ª–æ—Ç–∞–º.
"""

import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_db
from dice_utils import roll_dice, roll_dice_detailed, is_critical_hit, is_critical_miss, calculate_modifier, roll_d20
from spell_slot_manager import spell_slot_manager
from spell_scaling import (
    get_cantrip_scaling, 
    get_spell_slot_scaling, 
    apply_spell_scaling_in_combat,
    calculate_scaled_damage,
    get_spell_scaling_rules
)
from saving_throws import saving_throw_manager

logger = logging.getLogger(__name__)

class EnhancedSpellCombatManager:
    def __init__(self):
        self.db = get_db()
    
    async def display_combat_spells(self, update: Update, character_id: int, adventure_id: int, turn_index: int):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        char_query = "SELECT level FROM characters WHERE id = %s"
        char_result = self.db.execute_query(char_query, (character_id,))
        character_level = char_result[0]['level'] if char_result else 1
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = spell_slot_manager.get_available_slots(character_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–æ–µ–≤—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        combat_spells_query = """
            SELECT s.id, s.name, s.level, s.damage, s.damage_type, s.description, 
                   s.is_area_of_effect, s.scaling_type
            FROM character_spells cs
            JOIN spells s ON cs.spell_id = s.id
            WHERE cs.character_id = %s AND s.is_combat = TRUE
            ORDER BY s.level, s.name
        """
        
        combat_spells = self.db.execute_query(combat_spells_query, (character_id,))
        
        if not combat_spells:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π!"
            )
            return
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        available_spells = []
        for spell in combat_spells:
            # –ó–∞–≥–æ–≤–æ—Ä—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
            if spell['level'] == 0:
                available_spells.append(spell)
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ—Ç—ã
            elif spell_slot_manager.has_available_slot(character_id, spell['level']):
                available_spells.append(spell)
        
        if not available_spells:
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            await update.callback_query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –±–æ–µ–≤—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π!\n\n{slot_info}"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–æ —É—Ä–æ–≤–Ω—è–º
        spells_by_level = {}
        for spell in available_spells:
            level = spell['level']
            if level not in spells_by_level:
                spells_by_level[level] = []
            spells_by_level[level].append(spell)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π
        keyboard = []
        
        # –ó–∞–≥–æ–≤–æ—Ä—ã (0 —É—Ä–æ–≤–µ–Ω—å) —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        if 0 in spells_by_level:
            for spell in spells_by_level[0]:
                spell_name = spell['name']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–≤–æ—Ä–∞
                if spell['scaling_type'] == 'cantrip_damage':
                    scaling = get_cantrip_scaling(spell['id'], character_level)
                    if scaling and 'damage_dice' in scaling:
                        damage_info = f" ({scaling['damage_dice']})"
                    else:
                        damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                elif spell['scaling_type'] == 'cantrip_beams':
                    scaling = get_cantrip_scaling(spell['id'], character_level)
                    if scaling and 'num_beams' in scaling:
                        damage_info = f" ({spell['damage']} x{scaling['num_beams']})"
                    else:
                        damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                else:
                    damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                
                aoe_mark = " [AoE]" if spell['is_area_of_effect'] else ""
                
                button_text = f"üîÆ {spell_name}{damage_info}{aoe_mark}"
                callback_data = f"cast_{character_id}_{adventure_id}_{turn_index}_{spell['id']}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏—è –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏—Ö —É—Ä–æ–≤–Ω–µ–π
        for level in range(1, 10):
            if level in spells_by_level:
                for spell in spells_by_level[level]:
                    spell_name = spell['name']
                    damage_info = f" ({spell['damage']})" if spell['damage'] else ""
                    aoe_mark = " [AoE]" if spell['is_area_of_effect'] else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
                    has_scaling = spell['scaling_type'] is not None
                    scaling_mark = " ‚¨ÜÔ∏è" if has_scaling else ""
                    
                    button_text = f"‚ú®{level} {spell_name}{damage_info}{aoe_mark}{scaling_mark}"
                    callback_data = f"cast_{character_id}_{adventure_id}_{turn_index}_{spell['id']}"
                    keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                             callback_data=f"cancel_spell_{character_id}_{adventure_id}_{turn_index}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–ª–æ—Ç–∞—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        slot_info = spell_slot_manager.get_spell_slots_info(character_id)
        spell_text = f"ü™Ñ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n{slot_info}"
        spell_text += "\n\n‚¨ÜÔ∏è - –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å —Å–ª–æ—Ç–æ–º –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"
        
        await update.callback_query.edit_message_text(spell_text, reply_markup=reply_markup)
    
    async def handle_spell_cast(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                               character_id: int, adventure_id: int, turn_index: int, spell_id: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ
        char_query = "SELECT name, level FROM characters WHERE id = %s"
        char_result = self.db.execute_query(char_query, (character_id,))
        if not char_result:
            await update.callback_query.edit_message_text("‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        char_name = char_result[0]['name']
        character_level = char_result[0]['level']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        spell_query = """
            SELECT s.name, s.level, s.damage, s.damage_type, s.description, 
                   s.is_area_of_effect, s.scaling_type, s.base_scaling_info
            FROM spells s
            WHERE s.id = %s
        """
        
        spell_info = self.db.execute_query(spell_query, (spell_id,))
        if not spell_info:
            await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        spell = spell_info[0]
        spell_name = spell['name']
        spell_level = spell['level']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —ç—Ç–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
        char_spell_query = "SELECT id FROM character_spells WHERE character_id = %s AND spell_id = %s"
        has_spell = self.db.execute_query(char_spell_query, (character_id, spell_id))
        
        if not has_spell:
            await update.callback_query.edit_message_text(
                f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell_name}'!"
            )
            return
        
        # –î–ª—è –∑–∞–≥–æ–≤–æ—Ä–æ–≤ –Ω–µ –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–ª–æ—Ç
        if spell_level == 0:
            await self._cast_cantrip(update, character_id, adventure_id, turn_index, 
                                    spell_id, spell, char_name, character_level)
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            if spell['scaling_type'] and spell['scaling_type'].startswith('slot_'):
                # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –º–æ–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞
                await self._select_spell_slot(update, character_id, adventure_id, turn_index, 
                                             spell_id, spell)
            else:
                # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –±–µ–∑ —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–ª–æ—Ç
                slot_level = spell_slot_manager.use_spell_slot(character_id, spell_level)
                if slot_level is None:
                    slot_info = spell_slot_manager.get_spell_slots_info(character_id)
                    await update.callback_query.edit_message_text(
                        f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell_name}' (—É—Ä–æ–≤–µ–Ω—å {spell_level})!\n\n{slot_info}"
                    )
                    return
                
                await self._execute_spell(update, character_id, adventure_id, turn_index, 
                                         spell_id, spell, char_name, character_level, slot_level)
    
    async def _select_spell_slot(self, update: Update, character_id: int, adventure_id: int, 
                                turn_index: int, spell_id: int, spell: dict):
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É—Å–∏–ª–µ–Ω–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
        available_slots = spell_slot_manager.get_available_slots(character_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è
        usable_slots = []
        for slot_level, (used, max_slots) in available_slots.items():
            if slot_level >= spell['level'] and used < max_slots:
                usable_slots.append(slot_level)
        
        if not usable_slots:
            slot_info = spell_slot_manager.get_spell_slots_info(character_id)
            await update.callback_query.edit_message_text(
                f"‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell['name']}'!\n\n{slot_info}"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–æ—Ç–∞
        keyboard = []
        
        for slot_level in sorted(usable_slots):
            button_text = f"üìä –°–ª–æ—Ç {slot_level} —É—Ä–æ–≤–Ω—è"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–∏–ª–µ–Ω–∏–∏
            if slot_level > spell['level']:
                scaling = get_spell_slot_scaling(spell_id, slot_level)
                if scaling:
                    if 'damage_bonus' in scaling:
                        button_text += f" (+—É—Ä–æ–Ω)"
                    if 'target_bonus' in scaling:
                        button_text += f" (+—Ü–µ–ª–∏: {scaling['target_bonus']})"
                    if 'other_effects' in scaling:
                        effects = scaling['other_effects']
                        if 'projectiles' in effects:
                            button_text += f" ({effects['projectiles']})"
                        elif 'healing' in effects:
                            button_text += f" ({effects['healing']})"
            
            callback_data = f"use_slot_{character_id}_{adventure_id}_{turn_index}_{spell_id}_{slot_level}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                             callback_data=f"cancel_spell_{character_id}_{adventure_id}_{turn_index}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è '{spell['name']}' (–º–∏–Ω–∏–º—É–º {spell['level']} —É—Ä–æ–≤–Ω—è):"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–∏–ª–µ–Ω–∏—è
        if spell['base_scaling_info']:
            scaling_info = json.loads(spell['base_scaling_info'])
            if 'description' in scaling_info:
                message_text += f"\n\nüìà –£—Å–∏–ª–µ–Ω–∏–µ: {scaling_info['description']}"
        
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    
    async def handle_slot_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE,
                                   character_id: int, adventure_id: int, turn_index: int, 
                                   spell_id: int, slot_level: int):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å–ª–æ—Ç–∞ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ –∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–∏
        char_query = "SELECT name, level FROM characters WHERE id = %s"
        char_result = self.db.execute_query(char_query, (character_id,))
        char_name = char_result[0]['name'] if char_result else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        character_level = char_result[0]['level'] if char_result else 1
        
        spell_query = """
            SELECT name, level, damage, damage_type, description, is_area_of_effect, scaling_type
            FROM spells WHERE id = %s
        """
        spell_info = self.db.execute_query(spell_query, (spell_id,))
        if not spell_info:
            await update.callback_query.edit_message_text("‚ùå –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        spell = spell_info[0]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç
        used_slot = spell_slot_manager.use_spell_slot(character_id, spell['level'])
        if used_slot != slot_level:
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π
            if used_slot is not None:
                spell_slot_manager.restore_spell_slot(character_id, used_slot)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–ª–æ—Ç
            success = self.db.execute_query("""
                UPDATE character_spell_slots
                SET used_slots = used_slots + 1
                WHERE character_id = %s AND slot_level = %s AND used_slots < max_slots
            """, (character_id, slot_level))
            
            if not success:
                await update.callback_query.edit_message_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–æ—Ç {slot_level} —É—Ä–æ–≤–Ω—è!"
                )
                return
        
        await self._execute_spell(update, character_id, adventure_id, turn_index, 
                                 spell_id, spell, char_name, character_level, slot_level)
    
    async def _cast_cantrip(self, update: Update, character_id: int, adventure_id: int, 
                          turn_index: int, spell_id: int, spell: dict, char_name: str, character_level: int):
        """–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–≥–æ–≤–æ—Ä —Å —É—á–µ—Ç–æ–º —É—Ä–æ–≤–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–≤–æ—Ä–∞
        scaling = apply_spell_scaling_in_combat(spell_id, spell['damage'], character_level=character_level)
        
        # –ï—Å–ª–∏ –∑–∞–≥–æ–≤–æ—Ä –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª—É—á–µ–π/–∞—Ç–∞–∫
        if scaling['num_attacks'] > 1 and spell['damage']:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ü–µ–ª–µ–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª—É—á–∞
            await self._select_beam_targets(update, character_id, adventure_id, turn_index, 
                                          spell_id, spell, char_name, character_level, scaling)
        else:
            # –û–±—ã—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–≤–æ—Ä–∞
            await self._execute_spell(update, character_id, adventure_id, turn_index, 
                                     spell_id, spell, char_name, character_level, None)
    
    async def _select_beam_targets(self, update: Update, character_id: int, adventure_id: int,
                                  turn_index: int, spell_id: int, spell: dict, char_name: str,
                                  character_level: int, scaling: dict):
        """–í—ã–±–æ—Ä —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–≥–æ–≤–æ—Ä–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª—É—á–∞–º–∏."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.current_hp, e.max_hp
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.current_hp > 0
        """
        
        alive_enemies = self.db.execute_query(enemies_query, (adventure_id,))
        
        if not alive_enemies:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        num_beams = scaling['num_attacks']
        spell_name = spell['name']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—É—á–∞—Ö –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context_key = f"beam_targets_{character_id}_{spell_id}"
        if context_key not in update.callback_query.message.chat.data:
            update.callback_query.message.chat.data[context_key] = {
                'targets': [],
                'num_beams': num_beams,
                'current_beam': 1
            }
        
        beam_data = update.callback_query.message.chat.data[context_key]
        current_beam = beam_data['current_beam']
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
        keyboard = []
        for enemy in alive_enemies:
            enemy_name = enemy['name']
            hp_info = f" ({enemy['current_hp']}/{enemy['max_hp']} HP)"
            button_text = f"{enemy_name}{hp_info}"
            callback_data = f"beam_target_{character_id}_{adventure_id}_{turn_index}_{spell_id}_{enemy['id']}_{current_beam}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", 
                                             callback_data=f"cancel_spell_{character_id}_{adventure_id}_{turn_index}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"üéØ {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}'\n"
        message_text += f"–õ—É—á {current_beam} –∏–∑ {num_beams}. –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:"
        
        if beam_data['targets']:
            message_text += f"\n\n–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏: {', '.join([t['name'] for t in beam_data['targets']])}"
        
        await update.callback_query.edit_message_text(message_text, reply_markup=reply_markup)
    
    async def _execute_spell(self, update: Update, character_id: int, adventure_id: int,
                            turn_index: int, spell_id: int, spell: dict, char_name: str,
                            character_level: int, slot_level: int = None):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        scaling = apply_spell_scaling_in_combat(
            spell_id, 
            spell['damage'], 
            slot_level=slot_level,
            character_level=character_level if spell['level'] == 0 else None
        )
        
        # –ï—Å–ª–∏ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –Ω–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω
        if spell['damage']:
            if spell['is_area_of_effect']:
                # AoE –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
                await self._cast_aoe_spell(update, character_id, adventure_id, spell_id, spell, 
                                          char_name, scaling, slot_level)
            elif scaling['num_targets'] > 1:
                # –ó–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–µ–ª—è–º–∏
                await self._select_multiple_targets(update, character_id, adventure_id, 
                                                   turn_index, spell_id, spell, char_name, 
                                                   scaling, slot_level)
            else:
                # –û–¥–∏–Ω–æ—á–Ω–∞—è —Ü–µ–ª—å
                await self._display_spell_targets(update, character_id, adventure_id, 
                                                 turn_index, spell, char_name, scaling, slot_level)
        else:
            # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ
            await self._cast_utility_spell(update, character_id, adventure_id, spell, 
                                          char_name, slot_level)
    
    async def _display_spell_targets(self, update: Update, character_id: int, adventure_id: int,
                                    turn_index: int, spell: dict, char_name: str, 
                                    scaling: dict, slot_level: int = None):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–ª–∏ –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.current_hp, e.max_hp
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.current_hp > 0
        """
        
        alive_enemies = self.db.execute_query(enemies_query, (adventure_id,))
        
        if not alive_enemies:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–∞–≥–∞
        keyboard = []
        for enemy in alive_enemies:
            enemy_name = enemy['name']
            hp_info = f" ({enemy['current_hp']}/{enemy['max_hp']} HP)"
            callback_data = f"spell_target_enh_{character_id}_{adventure_id}_{turn_index}_{spell['id']}_{enemy['id']}_{slot_level or 0}"
            keyboard.append([InlineKeyboardButton(enemy_name + hp_info, callback_data=callback_data)])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        spell_name = spell['name']
        if slot_level and slot_level > spell['level']:
            spell_name += f" (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
        
        damage_info = f" ({scaling['damage']} {spell['damage_type']})" if spell['damage_type'] else f" ({scaling['damage']})"
        
        await update.callback_query.edit_message_text(
            f"üéØ {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}'{damage_info}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å:",
            reply_markup=reply_markup
        )
    
    async def _select_multiple_targets(self, update: Update, character_id: int, adventure_id: int,
                                      turn_index: int, spell_id: int, spell: dict, char_name: str,
                                      scaling: dict, slot_level: int = None):
        """–í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–µ–ª–µ–π
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é - –∞—Ç–∞–∫—É–µ–º –ø–µ—Ä–≤—ã–µ N —Ü–µ–ª–µ–π
        await self._cast_multi_target_spell(update, character_id, adventure_id, spell, 
                                           char_name, scaling, slot_level)
    
    async def _cast_aoe_spell(self, update: Update, character_id: int, adventure_id: int, spell_id: int,
                             spell: dict, char_name: str, scaling: dict, slot_level: int = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–æ –æ–±–ª–∞—Å—Ç–∏."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.current_hp, e.max_hp, e.armor_class
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.current_hp > 0
        """
        
        alive_enemies = self.db.execute_query(enemies_query, (adventure_id,))
        
        if not alive_enemies:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        spell_name = spell['name']
        if slot_level and slot_level > spell['level']:
            spell_name += f" (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
        
        result_text = f"üî• {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}' –ø–æ –æ–±–ª–∞—Å—Ç–∏!\n\n"
        
        enemies_defeated = []
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–Ω –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö
        damage_result = self._roll_spell_damage(scaling['damage'])
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∞—Å–±—Ä–æ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ü–µ–ª–µ–π
        saving_throw_results = saving_throw_manager.process_aoe_saving_throws(
            spell_id, character_id, 
            [{'id': e['id'], 'type': 'enemy'} for e in alive_enemies]
        )
        
        for enemy in alive_enemies:
            enemy_id = enemy['id']
            enemy_name = enemy['name']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–ø–∞—Å–±—Ä–æ—Å–∫–∞
            save_success, save_text = saving_throw_results.get(enemy_id, (False, ""))
            
            result_text += f"\n**{enemy_name}**:\n{save_text}\n"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–Ω
            damage_taken = damage_result['total']
            if save_success:
                # –£—Å–ø–µ—à–Ω—ã–π —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ - —É—Ä–æ–Ω –≤ –¥–≤–∞ —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ
                damage_taken //= 2
                result_text += f"üí• –£—Ä–æ–Ω (–ø–æ–ª–æ–≤–∏–Ω–∞): {damage_taken} {spell['damage_type']}\n"
            else:
                # –ü—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–π —Å–ø–∞—Å–±—Ä–æ—Å–æ–∫ - –ø–æ–ª–Ω—ã–π —É—Ä–æ–Ω
                result_text += f"üí• –£—Ä–æ–Ω: {damage_taken} {spell['damage_type']}\n"
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω
            new_hp = max(0, enemy['current_hp'] - damage_taken)
            self.db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                                 (new_hp, enemy_id))
            
            if new_hp <= 0:
                enemies_defeated.append(enemy_name)
        
        if enemies_defeated:
            result_text += f"\nüíÄ –ü–æ–≤–µ—Ä–∂–µ–Ω—ã: {', '.join(enemies_defeated)}"
        
        await update.callback_query.edit_message_text(result_text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –±–æ—è
        alive_enemies_query = "SELECT COUNT(*) as count FROM enemies WHERE adventure_id = %s AND current_hp > 0"
        alive_enemies_check = self.db.execute_query(alive_enemies_query, (adventure_id,))
        
        if alive_enemies_check and alive_enemies_check[0]['count'] == 0:
            from combat_manager import combat_manager
            await combat_manager.end_combat(update.callback_query, adventure_id, victory='players')
    
    async def _cast_multi_target_spell(self, update: Update, character_id: int, adventure_id: int,
                                      spell: dict, char_name: str, scaling: dict, slot_level: int = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Ü–µ–ª—è–º."""
        if not self.db.connection or not self.db.connection.is_connected():
            self.db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –∂–∏–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        enemies_query = """
            SELECT e.id, e.name, e.current_hp, e.max_hp
            FROM combat_participants cp
            JOIN enemies e ON cp.participant_id = e.id
            WHERE cp.adventure_id = %s AND cp.participant_type = 'enemy' AND e.current_hp > 0
            LIMIT %s
        """
        
        num_targets = scaling['num_targets']
        targets = self.db.execute_query(enemies_query, (adventure_id, num_targets))
        
        if not targets:
            await update.callback_query.edit_message_text("‚ùå –ù–µ—Ç —Ü–µ–ª–µ–π –¥–ª—è –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è!")
            return
        
        spell_name = spell['name']
        if slot_level and slot_level > spell['level']:
            spell_name += f" (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
        
        result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç '{spell_name}'!\n"
        result_text += f"–ü–æ—Ä–∞–∂–∞–µ—Ç {len(targets)} —Ü–µ–ª–µ–π:\n\n"
        
        for target in targets:
            damage_result = self._roll_spell_damage(scaling['damage'])
            result_text += f"üí• {target['name']}: {damage_result['text']} {spell['damage_type']} —É—Ä–æ–Ω–∞\n"
            
            new_hp = max(0, target['current_hp'] - damage_result['total'])
            self.db.execute_query("UPDATE enemies SET current_hp = %s WHERE id = %s",
                                 (new_hp, target['id']))
            
            if new_hp <= 0:
                result_text += f"   üíÄ {target['name']} –ø–æ–≤–µ—Ä–∂–µ–Ω!\n"
        
        await update.callback_query.edit_message_text(result_text)
    
    async def _cast_utility_spell(self, update: Update, character_id: int, adventure_id: int,
                                 spell: dict, char_name: str, slot_level: int = None):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ."""
        spell_name = spell['name']
        if slot_level and slot_level > spell['level']:
            spell_name += f" (—Å–ª–æ—Ç {slot_level} —É—Ä.)"
        
        result_text = f"‚ú® {char_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ '{spell_name}'!\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞
        if spell['description']:
            result_text += f"\nüìú {spell['description']}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–∏–ª–µ–Ω–∏–∏
        if slot_level and slot_level > spell['level']:
            scaling = get_spell_slot_scaling(spell['id'], slot_level)
            if scaling:
                result_text += f"\n\nüìà –£—Å–∏–ª–µ–Ω–∏–µ (—Å–ª–æ—Ç {slot_level} —É—Ä–æ–≤–Ω—è):"
                if 'duration_bonus' in scaling:
                    result_text += f"\n  ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {scaling['duration_bonus']}"
                if 'other_effects' in scaling:
                    effects = scaling['other_effects']
                    for key, value in effects.items():
                        result_text += f"\n  ‚Ä¢ {value}"
        
        await update.callback_query.edit_message_text(result_text)
    
    def _roll_spell_damage(self, damage_dice: str, critical: bool = False) -> dict:
        """–ë—Ä–æ—Å–∞–µ—Ç –∫—É–±–∏–∫–∏ —É—Ä–æ–Ω–∞ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏—è."""
        if critical:
            # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–ø–∞–¥–∞–Ω–∏—è —É–¥–≤–∞–∏–≤–∞–µ–º –∫—É–±–∏–∫–∏
            total1, rolls1, modifier1, _ = roll_dice_detailed(damage_dice)
            total2, rolls2, modifier2, _ = roll_dice_detailed(damage_dice)
            
            all_rolls = rolls1 + rolls2
            total_damage = sum(all_rolls) + modifier1  # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è
            
            if len(all_rolls) == 1:
                if modifier1 != 0:
                    damage_text = f"{all_rolls[0]} + {modifier1} = {total_damage}"
                else:
                    damage_text = f"{all_rolls[0]} = {total_damage}"
            else:
                rolls_str = " + ".join(map(str, all_rolls))
                if modifier1 != 0:
                    damage_text = f"{rolls_str} + {modifier1} = {total_damage}"
                else:
                    damage_text = f"{rolls_str} = {total_damage}"
        else:
            # –û–±—ã—á–Ω—ã–π —É—Ä–æ–Ω
            total_damage, damage_text = roll_dice(damage_dice)
        
        return {
            'total': total_damage,
            'text': damage_text
        }

# Global instance
enhanced_spell_combat_manager = EnhancedSpellCombatManager()
